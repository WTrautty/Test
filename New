import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime

# Define file paths
EXCEL_PATH = r"C:\Path\To\Your\MainData.xlsx"
BARRY_EXCEL_PATH = r"C:\Path\To\Your\BarryData.xlsx"
FRAT_PATH = r"C:\Path\To\Your\FratData.xlsx"
EXPORT_HTML = r"C:\Path\To\Export\Dashboard.html"

# Function to validate required columns in a DataFrame
def validate_columns(df, required_cols, file_name):
    missing = [col for col in required_cols if col not in df.columns]
    if missing:
        raise ValueError(f"Missing columns {missing} in {file_name}")

# Function to generate Barry's task owner pie chart
def generate_barry_task_owner_pie():
    try:
        df = pd.read_excel(EXCEL_PATH, sheet_name="Sheet2", engine="openpyxl")
    except Exception as e:
        return f"<p><strong>Failed to load Sheet2:</strong> {e}</p>"

    required_cols = ["Task Owner", "Task Name", "Closure Code 2"]
    if not all(col in df.columns for col in required_cols):
        return "<p><strong>One or more required columns ('Task Owner', 'Task Name', 'Closure Code 2') not found in Sheet2.</strong></p>"

    filtered_df = df[
        (df["Task Name"] == "Scheduling/Activations") &
        (~df["Closure Code 2"].isin(["Prep/Prework", "Administrative"]))
    ]

    task_owner_counts = filtered_df["Task Owner"].dropna().value_counts()
    if task_owner_counts.empty:
        return "<p><strong>No matching data for Task Name 'Scheduling/Activations' excluding 'Prep/Prework' and 'Administrative'.</strong></p>"

    fig = px.pie(
        names=task_owner_counts.index,
        values=task_owner_counts.values,
        title="Barry â€“ Task Ownership Distribution (Filtered)"
    )
    fig.update_layout(height=500)
    return fig.to_html(full_html=False, include_plotlyjs=False)

# Function to generate Barry's MACD task owner pie chart
def generate_barry_mac_pie_tab():
    try:
        df = pd.read_excel(EXCEL_PATH, sheet_name="Sheet2", engine="openpyxl")
    except Exception as e:
        return f"<p><strong>Failed to load Sheet2:</strong> {e}</p>"

    required_cols = ["Task Owner", "Task Name", "Completed Date"]
    if not all(col in df.columns for col in required_cols):
        return "<p><strong>One or more required columns ('Task Owner', 'Task Name', 'Completed Date') not found in Sheet2.</strong></p>"

    df["Completed Date"] = pd.to_datetime(df["Completed Date"], errors="coerce")
    filtered_df = df[
        (df["Task Name"].str.upper() == "MACD") &
        (df["Completed Date"] >= datetime(2024, 10, 10))
    ]

    task_owner_counts = filtered_df["Task Owner"].dropna().value_counts()
    if task_owner_counts.empty:
        return "<p><strong>No matching data for Task Name 'MACD' past 10/10/2024.</strong></p>"

    fig = go.Figure(data=[
        go.Pie(labels=task_owner_counts.index, values=task_owner_counts.values, hole=0.4)
    ])
    fig.update_layout(title="Task Owner Distribution for MACD Tasks (after 10/10/2024)")

    return f"""
    <div id="BarryTab-mac" class="main-tab" style="display:none;">
      <h2>MACD Task Owner Distribution (Since 10/10/2024)</h2>
      {fig.to_html(full_html=False, include_plotlyjs=False)}
    </div>
    """

# Main function to generate the dashboard
def main():
    print("[INFO] Starting dashboard generation")

    # === Load Data ===
    try:
        print("[INFO] Loading Excel data for USDA...")
        df_USDA = pd.read_excel(EXCEL_PATH, engine="openpyxl")
        print(f"[INFO] Loaded USDA rows: {len(df_USDA)}")

        print("[INFO] Loading Excel data for Barry...")
        df_Barry = pd.read_excel(BARRY_EXCEL_PATH, engine="openpyxl")
        print(f"[INFO] Loaded Barry rows: {len(df_Barry)}")

        print("[INFO] Loading Excel data for FRAT...")
        frat_df = pd.read_excel(FRAT_PATH, engine="openpyxl")
        print(f"[INFO] Loaded FRAT rows: {len(frat_df)}")
    except Exception as e:
        raise RuntimeError(f"[ERROR] Failed to load Excel files: {e}")

    # === Preprocess Function ===
    def preprocess(df, label):
        print(f"[INFO] Preprocessing {label}...")
        validate_columns(df, ["Task Owner", "Closure Code 1", "Completed Date"], f"{label} Data")
        df = df.dropna(subset=["Task Owner", "Closure Code 1", "Completed Date"])
        df["Completed Date"] = pd.to_datetime(df["Completed Date"], errors="coerce")
        df = df.dropna(subset=["Completed Date"])
        df["Month"] = df["Completed Date"].dt.to_period("M").astype(str)
        df["Is Fail"] = df["Closure Code 1"].str.lower().str.contains("fail|failed|failure", na=False)
        print(f"[INFO] Finished preprocessing {label}. Remaining rows: {len(df)}")
        return df

    df_USDA = preprocess(df_USDA, "USDA")
    df_Barry = preprocess(df_Barry, "Barry")

    # === Customer Block Generator ===
    def customer_block(customer_id, df, frat_source=None):
        print(f"[INFO] Generating HTML for customer: {customer_id}")

        if customer_id == "Barry":
            general_html = f"""
            <div id="BarryTab-general" class="main-tab" style="display:block;">
            <h2>Task Ownership Distribution</h2>
            {generate_barry_task_owner_pie()}
            </div>
            """

            mac_html = generate_barry_mac_pie_tab()

            return f"""
            <div class="customer-container" id="customer-{customer_id}" style="display:none;">
            <div class="sidebar">
                <h2>Barry</h2>
                <button onclick="switchMainTab(event, 'BarryTab-general')">General</button>
                <button onclick="switchMainTab(event, 'BarryTab-mac')">MAC</button>
            </div>
            <div class="main-content">
                <h1>Barry Data</h1>
                {general_html}
                {mac_html}
            </div>
            </div>
            """

        elif customer_id == "global":
            # Placeholder for global tabs
            return f"""
            <div class="customer-container" id="customer-{customer_id}" style="display:block;">
              <div class="sidebar">
                <h2>Global</h2>
                <button onclick="switchMainTab(event, 'globalTab-{customer_id}')">Global</button>
              </div>
              <div class="main-content">
                <h1>Global Overview</h1>
                <!-- Global content goes here -->
              </div>
            </div>
            """

        elif customer_id == "USDA":
            # Placeholder for USDA tabs
            return f"""
            <div class="customer-container" id="customer-{customer_id}" style="display:none;">
              <div class="sidebar">
                <h2>USDA</h2>
                <button onclick="switchMainTab(event, 'individualTab-{customer_id}')">Individual</button>
              </div>
              <div class="main-content">
                <h1>USDA Data</h1>
                <!-- USDA content goes here -->
              </div>
            </div>
            """

    # === Customer Switch UI (Bottom Left) ===
    customer_switcher_html = """
    <div class="customer-switcher">
      <button onclick="switchCustomer('global')" class="switch-btn global-btn">Global</button>
      <div class="bottom-buttons">
        <button onclick="switchCustomer('USDA')" class="switch-btn">USDA</button>
        <button onclick="switchCustomer('Barry')" class="switch-btn">Barry</button>
      </div>
    </div>
    """

    # === Final HTML Assembly ===
    print("[INFO] Assembling full HTML output...")
    html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Multi-Customer Dashboard</title>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <style>
    body {{
      font-family: 'Inter', sans-serif;
      margin: 0;
      background-color: #f4f6f9;
      color: #333;
    }}
    .sidebar {{
      width: 220px;
      background: #2f3542;
      color: #fff;
      height: 100vh;
      position: fixed;
      top: 0; left: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding-top: 30px;
      text-align: center;
    }}
    .sidebar h2 {{
      margin-bottom: 20px;
    }}
    .sidebar button {{
      padding: 15px 20px;
      width: 90%;
      border: none;
      background: none;
      color: white;
      text-align: left;
      font-size: 15px;
      cursor: pointer;
    }}
    .sidebar button:hover {{
      background: #57606f;
    }}
    .sidebar button.active {{
      background: #1e90ff;
    }}
    .main-content {{
      margin-left: 220px;
      padding: 30px;
    }}
    .main-tab {{
      display: none;
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.06);
      margin-bottom: 40px;
    }}
    .customer-switcher {{
      position: 
