def generate_lec_tab(df):
    if "Revised LEC" not in df.columns:
        return "<div id='lecTab' class='main-tab'><h2>'Revised LEC' column not found in data.</h2></div>"

    import hashlib  # required for consistent hashing

    def get_color_from_name(name, palette):
        """Hash the LEC name to a stable color from the palette."""
        h = int(hashlib.sha256(name.encode("utf-8")).hexdigest(), 16)
        return palette[h % len(palette)]

    df = df.copy()
    df["Is Fail"] = df["Closure Code 1"].str.lower().str.contains("fail|failed|failure", na=False)

    # --- Total LEC Pie (â‰¥1%) ---
    lec_counts = df["Revised LEC"].fillna("Unknown").astype(str).value_counts()
    total_count = lec_counts.sum()
    lec_filtered = lec_counts[lec_counts / total_count >= 0.01]
    misc_total = lec_counts[lec_counts / total_count < 0.01].sum()
    lec_final = pd.concat([lec_filtered, pd.Series({"Misc. LECs": misc_total})])
    lec_total_df = lec_final.reset_index()
    lec_total_df.columns = ["LEC", "Count"]
    lec_total_df = lec_total_df.sort_values("Count", ascending=False)  # descending order

    # --- Fail LEC Pie (â‰¥1%) ---
    fail_df = df[df["Is Fail"] == True]
    lec_fail_counts = fail_df["Revised LEC"].fillna("Unknown").astype(str).value_counts()
    total_fails = lec_fail_counts.sum()
    lec_fail_filtered = lec_fail_counts[lec_fail_counts / total_fails >= 0.01]
    misc_fail = lec_fail_counts[lec_fail_counts / total_fails < 0.01].sum()
    lec_fail_final = pd.concat([lec_fail_filtered, pd.Series({"Misc. LECs": misc_fail})])
    lec_fail_df = lec_fail_final.reset_index()
    lec_fail_df.columns = ["LEC", "Count"]
    lec_fail_df = lec_fail_df.sort_values("Count", ascending=False)

    # --- Combine for consistent ordering + color mapping ---
    ordered_lecs = list(lec_total_df["LEC"]) + [lec for lec in lec_fail_df["LEC"] if lec not in lec_total_df["LEC"]]
    from plotly.colors import qualitative
    palette = qualitative.Plotly
    lec_color_map = {lec: get_color_from_name(lec, palette) for lec in ordered_lecs}

    # --- Total Pie Chart ---
    lec_total_pie = px.pie(
        lec_total_df,
        names="LEC",
        values="Count",
        title="All Revised LEC Appearances (â‰¥1%)",
        color_discrete_map=lec_color_map,
        category_orders={"LEC": ordered_lecs}
    )
    lec_total_pie.update_layout(
        height=300,
        uniformtext_minsize=10,
        uniformtext_mode='hide',
        showlegend=True,
        margin=dict(t=50, b=20),
        legend_title_text="LEC",
        legend_orientation="v",
        legend=dict(x=1.02),
        # ðŸ‘‡ force top-left start
        piecolorway=palette,
        startangle=90
    )
    lec_total_html = lec_total_pie.to_html(full_html=False, include_plotlyjs=True)

    # --- Fail Pie Chart ---
    lec_fail_pie = px.pie(
        lec_fail_df,
        names="LEC",
        values="Count",
        title="Revised LEC Appearances on Failures (â‰¥1%)",
        color_discrete_map=lec_color_map,
        category_orders={"LEC": ordered_lecs}
    )
    lec_fail_pie.update_layout(
        height=300,
        uniformtext_minsize=10,
        uniformtext_mode='hide',
        showlegend=True,
        margin=dict(t=50, b=20),
        legend_title_text="LEC",
        legend_orientation="v",
        legend=dict(x=1.02),
        startangle=90  # ðŸ‘ˆ force top-left start
    )
    lec_fail_html = lec_fail_pie.to_html(full_html=False, include_plotlyjs=False)

    return f"""
    <div id="lecTab" class="main-tab">
      <h2>LEC Insights</h2>
      <hr>{lec_total_html}
      <hr>{lec_fail_html}
    </div>
    """
