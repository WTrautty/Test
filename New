def generate_scheduling_tab():
    try:
        xls = pd.read_excel(ADDITIONAL_EXCEL, sheet_name=None, engine="openpyxl")
    except Exception:
        return "<div id='schedulingTab' class='main-tab'><h2>Error Loading Scheduling Data</h2></div>"

    records = []
    for name, sheet in xls.items():
        if "End" not in sheet.columns:
            continue
        try:
            validate_columns(sheet, ["End"], f"Sheet {name}")
        except ValueError:
            continue
        s = sheet.dropna(subset=["End"]).copy()
        s["End"] = pd.to_datetime(s["End"], errors="coerce")
        s = s.dropna(subset=["End"])
        s["Month"] = s["End"].dt.to_period("M").astype(str)
        counts = s.groupby("Month").size().reset_index(name="Count")
        counts["Tab"] = name
        records.append(counts)

    if not records:
        return "<div id='schedulingTab' class='main-tab'><h2>No Scheduling Data Available</h2></div>"

    sched = pd.concat(records, ignore_index=True)
    avg_tab_fig = px.bar(
        sched.groupby("Tab")["Count"].mean().reset_index(),
        x="Tab",
        y="Count",
        title="Avg Rows per Tab per Month",
    )
    avg_tab_fig.update_layout(height=300)

    # Prep base figure
    total_monthly_fig = go.Figure()

    # Add total line
    total_df = sched.groupby("Month")["Count"].sum().reset_index(name="Total Rows")
    total_monthly_fig.add_trace(
        go.Scatter(x=total_df["Month"], y=total_df["Total Rows"], name="Total", line=dict(width=3))
    )

    # Add each individual tab line
    for tab, group in sched.groupby("Tab"):
        monthly = group.groupby("Month")["Count"].sum().reset_index()
        total_monthly_fig.add_trace(
            go.Scatter(x=monthly["Month"], y=monthly["Count"], name=tab, line=dict(dash="dot"))
        )

    total_monthly_fig.update_layout(
        title="Total Rows Across All Tabs and Per Calendar",
        height=300
)

    workday_data = []
    for month_str, grp in sched.groupby("Month"):
        total = grp["Count"].sum()
        try:
            year, mon = map(int, month_str.split("-"))
            start_date = pd.Timestamp(f"{year}-{mon:02d}-01")
            end_date = start_date + pd.offsets.MonthEnd(1)
            workdays = pd.date_range(start=start_date, end=end_date, freq="B").size
            workday_data.append({"Month": month_str, "Avg Per Workday": total / workdays})
        except ValueError:
            continue

    workday_df = pd.DataFrame(workday_data)
    workday_fig = px.bar(
        workday_df, x="Month", y="Avg Per Workday", title="Average Rows per Workday"
    )
    workday_fig.update_layout(height=600)

    return f"""
    <div id="schedulingTab" class="main-tab">
      <h2>Scheduling Dashboard</h2>
      <hr>{avg_tab_fig.to_html(full_html=False, include_plotlyjs=True)}
      <hr>{total_monthly_fig.to_html(full_html=False, include_plotlyjs=False)}
      <hr>{workday_fig.to_html(full_html=False, include_plotlyjs=False)}
    </div>
    """
