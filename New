def generate_scheduling_tab():
    import pandas as pd
    import plotly.graph_objects as go
    import plotly.express as px

    try:
        xls = pd.read_excel(ADDITIONAL_EXCEL, sheet_name=None, engine="openpyxl")
    except Exception:
        return "<div id='schedulingTab' class='main-tab'><h2>Error Loading Scheduling Data</h2></div>"

    records = []
    for name, sheet in xls.items():
        if "End" not in sheet.columns:
            continue
        try:
            validate_columns(sheet, ["End"], f"Sheet {name}")
        except ValueError:
            continue
        s = sheet.dropna(subset=["End"]).copy()
        s["End"] = pd.to_datetime(s["End"], errors="coerce")
        s = s.dropna(subset=["End"])
        s["Month"] = s["End"].dt.to_period("M").astype(str)
        s["Tab"] = name
        records.append(s)

    if not records:
        return "<div id='schedulingTab' class='main-tab'><h2>No Scheduling Data Available</h2></div>"

    all_data = pd.concat(records, ignore_index=True)
    all_data = all_data[all_data["Tab"] != "Fed-Networks-Activations@Lumen.com"]

    # === Chart 1: Average per tab per month ===
    avg_tab_fig = px.bar(
        all_data.groupby("Tab")["Month"].value_counts().groupby("Tab").mean().reset_index(name="Average"),
        x="Tab",
        y="Average",
        title="Avg Rows per Tab per Month"
    )
    avg_tab_fig.update_layout(height=300)

    # === Chart 2: Total rows across all tabs ===
    total_monthly_fig = go.Figure()
    total_df = all_data.groupby("Month").size().reset_index(name="Total Rows")
    total_monthly_fig.add_trace(go.Scatter(
        x=total_df["Month"], y=total_df["Total Rows"],
        name="Total", line=dict(width=3)
    ))
    for tab, group in all_data.groupby("Tab"):
        monthly = group.groupby("Month").size().reset_index(name="Count")
        total_monthly_fig.add_trace(go.Scatter(
            x=monthly["Month"], y=monthly["Count"],
            name=tab, line=dict(dash="dot")
        ))
    total_monthly_fig.update_layout(
        title="Total Rows Across All Tabs and Per Calendar",
        height=300
    )

    # === Chart 3: Workday-adjusted rows per scheduler with dropdown ===
    sched = all_data.groupby(["Month", "Tab"]).size().reset_index(name="Count")
    months = sorted(sched["Month"].unique())
    summary = {}
    for schedulers in [1, 2, 3, 4, 5]:
        rows = []
        vac_days = 36 * schedulers
        vac_per_month = vac_days / schedulers / len(months)
        for month in months:
            month_df = sched[sched["Month"] == month]
            total = month_df["Count"].sum()
            year, mon = map(int, month.split("-"))
            start = pd.Timestamp(f"{year}-{mon:02d}-01")
            end = start + pd.offsets.MonthEnd(1)
            workdays = pd.date_range(start=start, end=end, freq="B").size
            adj_days = max(workdays - vac_per_month, 1)
            rows.append(total / (adj_days * schedulers))
        summary[schedulers] = rows

    sched_dropdown_fig = go.Figure()
    visibility = []
    for i, (schedulers, values) in enumerate(summary.items()):
        time_to_schedule = [450 / v if v else None for v in values]  # 450 minutes per 7.5 hr day

        sched_dropdown_fig.add_trace(go.Bar(
            x=months,
            y=values,
            name=f"{schedulers}",
            visible=(i == 0),  # Default to 1 scheduler
            customdata=[[t] for t in time_to_schedule],
            hovertemplate="Month: %{x}<br>Rows/Workday: %{y:.1f}<br>Min/Row: %{customdata[0]:.0f}<extra></extra>"
        ))
        visibility_row = [False] * len(summary)
        visibility_row[i] = True
        visibility.append(visibility_row)

    sched_dropdown_fig.update_layout(
        title="Adjusted Rows per Scheduler per Workday (with Vacation Time)",
        height=600,
        updatemenus=[{
            "buttons": [
                {
                    "label": f"{n} Scheduler{'s' if n > 1 else ''}",
                    "method": "update",
                    "args": [
                        {"visible": visibility[i]},
                        {"title": f"Adjusted Rows per Scheduler â€“ {n} Scheduler{'s' if n > 1 else ''}"}
                    ]
                } for i, n in enumerate(summary.keys())
            ],
            "direction": "down",
            "showactive": True,
            "x": 1,
            "xanchor": "right",
            "y": 1.15,
            "yanchor": "top"
        }]
    )

    explanation = """
    <p><i>This chart shows how many rows (appointments) each scheduler must handle per workday.<br>
    The calculation adjusts for a 7.5-hour workday and assumes each scheduler uses 36 vacation days per year,
    spread evenly across months. Hover over the bars to see the estimated time each task takes.</i></p>
    """

    return f"""
    <div id="schedulingTab" class="main-tab">
      <h2>Scheduling Dashboard</h2>
      <hr>{avg_tab_fig.to_html(full_html=False, include_plotlyjs=True)}
      <hr>{total_monthly_fig.to_html(full_html=False, include_plotlyjs=False)}
      <hr>{sched_dropdown_fig.to_html(full_html=False, include_plotlyjs=False)}
      {explanation}
    </div>
    """
