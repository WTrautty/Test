def generate_frat_tab(frat_df):
    import pandas as pd
    import plotly.graph_objects as go
    import plotly.express as px

    # Ensure dates are datetime
    frat_df = frat_df.copy()
    frat_df['Create Date'] = pd.to_datetime(frat_df['Create Date'], errors='coerce')
    frat_df['Completed Date'] = pd.to_datetime(frat_df['Completed Date'], errors='coerce')

    # Drop rows missing critical data
    frat_df = frat_df.dropna(subset=['Create Date', 'Completed Date', 'Task Owner'])

    # Compute days to close
    frat_df['Days to Close'] = (frat_df['Completed Date'] - frat_df['Create Date']).dt.days
    frat_df = frat_df[frat_df['Days to Close'] >= 0]  # remove invalid negatives

    # Extract month from Completed Date
    frat_df['Month'] = frat_df['Completed Date'].dt.to_period('M').astype(str)

    # Determine top 3 Task Owners from frat_df ONLY
    top_owners = frat_df['Task Owner'].value_counts().nlargest(3).index.tolist()

    def create_bar_chart(data, owner_label):
        monthly = data.groupby('Month')['Days to Close'].mean().reset_index()
        fig = px.bar(monthly, x='Month', y='Days to Close', title=f"Average Days to Close - {owner_label}")
        fig.update_layout(height=350)
        return fig.to_html(full_html=False, include_plotlyjs=False)

    global_chart = create_bar_chart(frat_df, 'Global')

    individual_charts = []
    buttons = [
        f'<button class="tablink" onclick="openTab(event, \"frat_tab_global\")">Global</button>'
    ]
    contents = [
        f'<div id="frat_tab_global" class="tabcontent" style="display:block">{global_chart}</div>'
    ]

    for i, owner in enumerate(top_owners):
        owner_df = frat_df[frat_df['Task Owner'] == owner]
        chart_html = create_bar_chart(owner_df, owner)
        div_id = f"frat_tab_{i}"
        buttons.append(f'<button class="tablink" onclick="openTab(event, \"{div_id}\")">{owner}</button>')
        contents.append(f'<div id="{div_id}" class="tabcontent" style="display:none">{chart_html}</div>')

    html_output = f"""
    <div id='fratTab' class='main-tab'>
      <h2>FRAT Task Closure Analysis</h2>
      <div class='tab-buttons-wrapper'>{''.join(buttons)}</div>
      {''.join(contents)}
    </div>
    """
    return html_output

def main():
    try:
        df = pd.read_excel(EXCEL_PATH, engine="openpyxl")
    except Exception:
        raise

    try:
        frat_df = pd.read_excel(FRAT_PATH, engine="openpyxl")
    except Exception as e:
        raise RuntimeError(f"Failed to load FRAT Excel file: {e}")

    required_cols = ["Task Owner", "Closure Code 1", "Completed Date"]
    validate_columns(df, required_cols, EXCEL_PATH)
    df = df.dropna(subset=required_cols)
    df["Completed Date"] = pd.to_datetime(df["Completed Date"], errors="coerce")
    df = df.dropna(subset=["Completed Date"])
    df["Month"] = df["Completed Date"].dt.to_period("M")
    df = df.sort_values("Month")
    df["Month"] = df["Month"].astype(str)
    df["Is Fail"] = df["Closure Code 1"].str.lower().str.contains("fail|failed|failure", na=False)

    frat_tab_html = generate_frat_tab(frat_df)

    html = f"""
<!DOCTYPE html>
<html lang=\"en\">
<head>
  <meta charset=\"UTF-8\" />
  <title>Closure Code Dashboard</title>
  <script src=\"plotly-latest.min.js\"></script> <!-- Local Plotly JS -->
  ... (styles and scripts remain unchanged) ...
</head>
<body>
  <div class=\"sidebar\">
    <h2>Dashboard</h2>
    <button onclick=\"switchMainTab(event, 'globalTab')\">Global</button>
    <button onclick=\"switchMainTab(event, 'individualTab')\">Individual</button>
    <button onclick=\"switchMainTab(event, 'schedulingTab')\">Scheduling</button>
    <button onclick=\"switchMainTab(event, 'lecTab')\">LEC</button>
    <button onclick=\"switchMainTab(event, 'failureTab')\">Failure Analysis</button>
    <button onclick=\"switchMainTab(event, 'fratTab')\">FRAT</button>
  </div>
  <div class=\"main-content\">
    <h1>Closure Code Dashboard</h1>
    {generate_global_tab(df)}
    {generate_individual_tab(df)}
    {generate_scheduling_tab()}
    {generate_lec_tab(df)}
    {generate_failure_analysis_tab(df)}
    {frat_tab_html}
  </div>
</body>
</html>
"""

    with open(EXPORT_HTML, "w", encoding="utf-8") as f:
        f.write(html)
