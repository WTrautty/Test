# === PIE CHART: Task Owner Only ===
owner_pie_data = owner_data['Closure Code 1'].value_counts().reset_index()
owner_pie_data.columns = ['Closure Code', 'Count']

pie_fig = px.pie(owner_pie_data, names='Closure Code', values='Count',
                 title=f"{owner}'s Closure Code Distribution")
pie_fig.update_traces(textinfo='percent+label')
pie_fig.update_layout(
    autosize=True,
    margin=dict(t=60, l=20, r=20, b=20),
    height=400
)

# === 100% STACKED BAR CHART: Owner vs Top Performer (Normalized Ratios) ===
top_performer = "James McGee"
top_data = df[df['Task Owner'] == top_performer]
top_code_counts = top_data['Closure Code 1'].value_counts(normalize=True) * 100
owner_code_counts = owner_data['Closure Code 1'].value_counts(normalize=True) * 100

# Ensure all closure codes exist in both series
all_codes = set(top_code_counts.index).union(set(owner_code_counts.index))
top_code_counts = top_code_counts.reindex(all_codes, fill_value=0)
owner_code_counts = owner_code_counts.reindex(all_codes, fill_value=0)

# Create horizontal stacked bars
stacked_fig = go.Figure()

for code in sorted(all_codes):
    stacked_fig.add_trace(go.Bar(
        name=code,
        y=[owner, top_performer],
        x=[owner_code_counts[code], top_code_counts[code]],
        orientation='h'
    ))

stacked_fig.update_layout(
    barmode='stack',
    title=f"{owner} vs {top_performer} – Closure Code Usage (Normalized)",
    xaxis=dict(title='Percentage (%)', range=[0, 100]),
    yaxis=dict(title=''),
    height=400,
    margin=dict(t=60, l=40, r=40, b=40),
    legend_title="Closure Code"
)

# === LINE CHART ===
owner_monthly = owner_data.groupby('Month').size().reset_index(name='Completed')
line_fig = go.Figure()
line_fig.add_trace(go.Scatter(
    x=owner_monthly['Month'],
    y=owner_monthly['Completed'],
    mode='lines+markers',
    name=f'{owner} Monthly Completed',
    line=dict(color='blue')
))
line_fig.add_trace(go.Scatter(
    x=global_avg['Month'],
    y=global_avg['Average'],
    mode='lines+markers',
    name='Global Monthly Average',
    line=dict(color='red', dash='dash')
))
line_fig.update_layout(
    title=f"{owner} – Monthly Completed Tasks vs Global Avg",
    xaxis_title='Month',
    yaxis_title='Tasks Completed',
    height=500,
    autosize=True,
    margin=dict(t=60, l=40, r=40, b=40),
    hovermode='x unified'
)

# === Convert to HTML ===
pie_html = pie_fig.to_html(full_html=False, include_plotlyjs=(i == 0), config={'responsive': True})
stacked_html = stacked_fig.to_html(full_html=False, include_plotlyjs=False, config={'responsive': True})
line_html = line_fig.to_html(full_html=False, include_plotlyjs=False, config={'responsive': True})

# === Assemble Tab ===
tab_buttons.append(f'<button class="tablink" onclick="openTab(event, \'{div_id}\')">{owner}</button>')
tab_contents.append(f'''
<div id="{div_id}" class="tabcontent" style="display:{'block' if i == 0 else 'none'}">
    {pie_html}
    <hr>
    {stacked_html}
    <hr>
    {line_html}
</div>
''')
