def generate_failure_analysis_tab(df):
    import pandas as pd
    import numpy as np
    from scipy.stats import chi2_contingency, pearsonr
    import plotly.graph_objects as go

    required_cols = ["Revised LEC", "Closure Code 1", "Task Owner", "Completed Date", "Create Date"]
    if not all(col in df.columns for col in required_cols):
        return "<div id='failureTab' class='main-tab'><h2>Required columns not found.</h2></div>"

    df = df.copy()
    df["Revised LEC"] = df["Revised LEC"].fillna("Unknown").astype(str)
    df["Task Owner"] = df["Task Owner"].fillna("Unknown").astype(str)
    df["Is Fail"] = df["Closure Code 1"].str.lower().str.contains("fail|failed|failure", na=False).astype(int)
    df["Completed Date"] = pd.to_datetime(df["Completed Date"], errors="coerce")
    df["Create Date"] = pd.to_datetime(df["Create Date"], errors="coerce")
    df = df.dropna(subset=["Completed Date", "Create Date"])

    df["Month"] = df["Completed Date"].dt.to_period("M").astype(str)
    df["Days to Close"] = (df["Completed Date"] - df["Create Date"]).dt.days

    # === Correlation: Revised LEC vs Failure ===
    lec_contingency = pd.crosstab(df["Revised LEC"], df["Is Fail"])
    lec_chi2, lec_p, _, _ = chi2_contingency(lec_contingency)
    lec_n = lec_contingency.sum().sum()
    lec_min_dim = min(lec_contingency.shape) - 1
    lec_cramers_v = np.sqrt(lec_chi2 / (lec_n * lec_min_dim)) if lec_min_dim > 0 else 0

    # === Correlation: Task Owner vs Failure ===
    owner_contingency = pd.crosstab(df["Task Owner"], df["Is Fail"])
    owner_chi2, owner_p, _, _ = chi2_contingency(owner_contingency)
    owner_n = owner_contingency.sum().sum()
    owner_min_dim = min(owner_contingency.shape) - 1
    owner_cramers_v = np.sqrt(owner_chi2 / (owner_n * owner_min_dim)) if owner_min_dim > 0 else 0

    # === Correlation: Monthly Volume vs Failure Rate ===
    monthly_data = df.groupby("Month").agg(
        Fail_Rate=("Is Fail", "mean"),
        Order_Count=("Is Fail", "count")
    ).reset_index()
    if len(monthly_data["Order_Count"].unique()) > 1:
        volume_corr, volume_p = pearsonr(monthly_data["Order_Count"], monthly_data["Fail_Rate"])
    else:
        volume_corr, volume_p = 0, 1

    # === Correlation: Days to Close vs Failure ===
    df_filtered = df.dropna(subset=["Days to Close"])
    if df_filtered["Days to Close"].nunique() > 1:
        time_corr, time_p = pearsonr(df_filtered["Days to Close"], df_filtered["Is Fail"])
    else:
        time_corr, time_p = 0, 1

    def annotate_strength(value):
        if value >= 0.3:
            return "Moderate association"
        elif value >= 0.1:
            return "Weak association"
        else:
            return "Negligible association"

    metrics = [
        {
            "name": "Revised LEC",
            "value": lec_cramers_v,
            "p": lec_p,
            "type": "Cramér's V",
            "desc": "How much the LEC choice relates to failures."
        },
        {
            "name": "Task Owner",
            "value": owner_cramers_v,
            "p": owner_p,
            "type": "Cramér's V",
            "desc": "Whether who's assigned matters for failures."
        },
        {
            "name": "Monthly Volume",
            "value": volume_corr,
            "p": volume_p,
            "type": "Pearson r",
            "desc": "If busy months lead to more failures."
        },
        {
            "name": "Time to Close",
            "value": time_corr,
            "p": time_p,
            "type": "Pearson r",
            "desc": "If slower closures increase failure chances."
        }
    ]

    bar_fig = go.Figure()
    x_labels = []
    y_vals = []
    bar_colors = []
    annotations = []
    descriptions = []

    for metric in metrics:
        x_labels.append(metric["name"])
        y_vals.append(metric["value"])
        bar_colors.append("#1f77b4")
        annotations.append(
            f"{metric['type']} = {metric['value']:.3f}<br>p = {metric['p']:.2e}<br><i>{annotate_strength(metric['value'])}</i>"
        )
        descriptions.append(f"<b>{metric['name']}:</b> {metric['desc']}")

    bar_fig.add_trace(go.Bar(
        x=x_labels,
        y=y_vals,
        text=annotations,
        textposition="auto",
        marker_color=bar_colors
    ))

    bar_fig.update_layout(
        title="Correlation with Failure",
        yaxis_title="Association Strength",
        yaxis=dict(range=[-0.1, 0.4]),
        height=450
    )

    description_html = "<br><br><ul>" + "".join([f"<li>{d}</li>" for d in descriptions]) + "</ul>"

    return f"""
    <div id="failureTab" class="main-tab">
      <h2>Failure Analysis</h2>
      <p>This section analyzes what factors are most related to failures. Higher values suggest stronger connections.</p>
      {bar_fig.to_html(full_html=False, include_plotlyjs=False)}
      {description_html}
    </div>
    """
