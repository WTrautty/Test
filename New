import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

# === Configuration ===
EXCEL_PATH = r"C:\Path\To\Your\MainDashboardData.xlsx"
ADDITIONAL_EXCEL = r"C:\Path\To\Your\MultiSheetWorkbook.xlsx"
EXPORT_HTML = r"C:\Path\To\Your\Output\Dashboard.html"

# === Load Main Data ===
df = pd.read_excel(EXCEL_PATH, engine='openpyxl')
df = df[['Task Owner', 'Closure Code 1', 'Completed Date']].dropna()
df['Completed Date'] = pd.to_datetime(df['Completed Date'], errors='coerce')
df = df.dropna(subset=['Completed Date'])
df['Month'] = df['Completed Date'].dt.to_period('M').astype(str)

# === Global Statistics Charts ===

# 1. Global failure rate line chart
df['Is Fail'] = df['Closure Code 1'].str.lower().str.contains('fail')
monthly_fail_rate = df.groupby('Month')['Is Fail'].mean().reset_index()
monthly_fail_rate['Fail %'] = monthly_fail_rate['Is Fail'] * 100

fail_line_fig = go.Figure()
fail_line_fig.add_trace(go.Scatter(
    x=monthly_fail_rate['Month'], y=monthly_fail_rate['Fail %'],
    mode='lines+markers', name="Failure Rate", line=dict(color='crimson')
))
fail_line_fig.update_layout(title="Global Failure Rate per Month", xaxis_title="Month",
                            yaxis_title="Failure Rate (%)", yaxis=dict(range=[0, 100]), height=400)
fail_line_html = fail_line_fig.to_html(full_html=False, include_plotlyjs=True)

# 2. Global closure code pie chart
closure_distribution = df['Closure Code 1'].value_counts(normalize=True) * 100
pie_df = closure_distribution.reset_index()
pie_df.columns = ['Closure Code', 'Percentage']
closure_pie_fig = px.pie(pie_df, names='Closure Code', values='Percentage',
                         title="Global Closure Code Distribution")
closure_pie_fig.update_layout(height=400)
closure_pie_html = closure_pie_fig.to_html(full_html=False, include_plotlyjs=False)

# 3. Global closed orders per month
monthly_closed = df.groupby('Month').size().reset_index(name='Closed Orders')
closed_line_fig = go.Figure()
closed_line_fig.add_trace(go.Scatter(
    x=monthly_closed['Month'], y=monthly_closed['Closed Orders'],
    mode='lines+markers', name="Closed Orders", line=dict(color='blue')
))
closed_line_fig.update_layout(title="Global Closed Orders per Month",
                              xaxis_title="Month", yaxis_title="Closed Orders", height=400)
closed_line_html = closed_line_fig.to_html(full_html=False, include_plotlyjs=False)

# === Multi-Sheet Workbook Analysis ===
xls = pd.read_excel(ADDITIONAL_EXCEL, sheet_name=None, engine='openpyxl')
sheet_monthly_counts = []

for sheet_name, sheet_df in xls.items():
    if "End" in sheet_df.columns:
        sheet_df = sheet_df.dropna(subset=["End"])
        sheet_df["End"] = pd.to_datetime(sheet_df["End"], errors='coerce')
        sheet_df = sheet_df.dropna(subset=["End"])
        sheet_df["Month"] = sheet_df["End"].dt.to_period("M").astype(str)
        monthly = sheet_df.groupby("Month").size().reset_index(name="Count")
        monthly["Sheet"] = sheet_name
        sheet_monthly_counts.append(monthly)

combined_sched_data = pd.concat(sheet_monthly_counts, ignore_index=True)

# 4. Row counts per sheet per month (for Global)
line_fig_tabs = go.Figure()
for sheet in combined_sched_data["Sheet"].unique():
    sheet_data = combined_sched_data[combined_sched_data["Sheet"] == sheet]
    line_fig_tabs.add_trace(go.Scatter(
        x=sheet_data["Month"], y=sheet_data["Count"],
        mode="lines+markers", name=sheet
    ))
line_fig_tabs.update_layout(
    title="Monthly Row Counts by Sheet (Additional Workbook)",
    xaxis_title="Month", yaxis_title="Row Count", height=400
)
end_tab_chart_html = line_fig_tabs.to_html(full_html=False, include_plotlyjs=False)

# === Combine Global Tab HTML ===
global_tab_html = f"""
<div class="tabcontent" style="display:block">
    <h2>Global Closure Code Statistics</h2>
    <hr>{fail_line_html}
    <hr>{closure_pie_html}
    <hr>{closed_line_html}
    <hr>
    <h3>Monthly Row Counts by Sheet</h3>
    {end_tab_chart_html}
</div>
"""

# === Scheduling Tab Visualizations ===

# 1. Bar: Average rows per tab per month
avg_rows_per_tab = combined_sched_data.groupby("Sheet")["Count"].mean().reset_index()
bar_avg_tab_fig = px.bar(avg_rows_per_tab, x="Sheet", y="Count", title="Average Rows per Tab per Month")
bar_avg_tab_fig.update_layout(height=400)
bar_avg_tab_html = bar_avg_tab_fig.to_html(full_html=False, include_plotlyjs=True)

# 2. Line: Combined rows per month (all tabs)
total_per_month = combined_sched_data.groupby("Month")["Count"].sum().reset_index(name="Total Rows")
line_total_fig = go.Figure()
line_total_fig.add_trace(go.Scatter(
    x=total_per_month["Month"], y=total_per_month["Total Rows"],
    mode="lines+markers", name="Total Rows"
))
line_total_fig.update_layout(title="Total Combined Rows per Month",
                             xaxis_title="Month", yaxis_title="Total Rows", height=400)
line_total_html = line_total_fig.to_html(full_html=False, include_plotlyjs=False)

# 3. Bar: Avg rows per workday per month
from pandas.tseries.offsets import MonthEnd

workday_avg_data = []
for month, group in combined_sched_data.groupby("Month"):
    total_rows = group["Count"].sum()
    try:
        year, mon = map(int, month.split('-'))
        start = pd.Timestamp(year, mon, 1)
        end = start + MonthEnd(0)
        workdays = pd.date_range(start, end, freq='B')
        avg_per_day = total_rows / len(workdays)
        workday_avg_data.append({"Month": month, "Avg Per Workday": avg_per_day})
    except:
        continue

workday_df = pd.DataFrame(workday_avg_data)
bar_workday_fig = px.bar(workday_df, x="Month", y="Avg Per Workday",
                         title="Average Rows per Workday per Month")
bar_workday_fig.update_layout(height=400)
bar_workday_html = bar_workday_fig.to_html(full_html=False, include_plotlyjs=False)

# === Scheduling Tab HTML ===
scheduling_tab_html = f"""
<div class="tabcontent" style="display:block">
    <h2>Scheduling Dashboard</h2>
    <hr>{bar_avg_tab_html}
    <hr>{line_total_html}
    <hr>{bar_workday_html}
</div>
"""

# === HTML Output with Tabs ===
html_output = f"""
<html>
<head>
    <title>Closure Code Dashboard</title>
    <script>
    function switchMainTab(evt, tabName) {{
        const tabs = document.getElementsByClassName('main-tab');
        for (let i = 0; i < tabs.length; i++) {{
            tabs[i].style.display = 'none';
        }}
        const buttons = document.getElementsByClassName('maintablink');
        for (let i = 0; i < buttons.length; i++) {{
            buttons[i].classList.remove('active');
        }}
        document.getElementById(tabName).style.display = 'block';
        evt.currentTarget.classList.add('active');
    }}
    </script>
    <style>
        body {{
            font-family: sans-serif;
            background-color: #f9f9f9;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
        }}
        .maintablink {{
            background-color: #ddd;
            border: none;
            cursor: pointer;
            padding: 10px 20px;
            margin: 5px;
            font-size: 16px;
        }}
        .maintablink.active {{
            background-color: #bbb;
        }}
        .main-tab {{
            display: none;
            width: 100%;
            max-width: 1400px;
        }}
        .tabcontent {{
            width: 100%;
            background: white;
            margin: 20px auto;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.05);
            border-radius: 8px;
        }}
    </style>
</head>
<body>
    <h1>Closure Code Dashboard</h1>
    <div>
        <button class="maintablink active" onclick="switchMainTab(event, 'globalTab')">Global Statistics</button>
        <button class="maintablink" onclick="switchMainTab(event, 'individualTab')">Individual Reports</button>
        <button class="maintablink" onclick="switchMainTab(event, 'schedulingTab')">Scheduling</button>
    </div>

    <div id="globalTab" class="main-tab" style="display:block">
        {global_tab_html}
    </div>

    <div id="individualTab" class="main-tab">
        <div class="tabcontent">
            <h2>Individual Reports</h2>
            <p>Insert your task owner dashboards here.</p>
        </div>
    </div>

    <div id="schedulingTab" class="main-tab">
        {scheduling_tab_html}
    </div>
</body>
</html>
"""

# === Write Final Dashboard HTML ===
with open(EXPORT_HTML, "w", encoding="utf-8") as f:
    f.write(html_output)

print(f"âœ… Dashboard created: {EXPORT_HTML}")
