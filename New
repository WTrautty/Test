def main():
    import pandas as pd

    print("[INFO] Starting dashboard generation")

    # === Load Data for Both Customers ===
    try:
        print("[INFO] Loading Excel data for Shawn...")
        df_shawn = pd.read_excel(EXCEL_PATH, engine="openpyxl")
        print(f"[INFO] Loaded Shawn rows: {len(df_shawn)}")

        print("[INFO] Loading Excel data for Barry...")
        df_barry = pd.read_excel(BARRY_EXCEL_PATH, engine="openpyxl")
        print(f"[INFO] Loaded Barry rows: {len(df_barry)}")
    except Exception as e:
        raise RuntimeError(f"[ERROR] Failed to load Excel files: {e}")

    # === Validate and Preprocess Each Customer ===
    def preprocess(df, label):
        print(f"[INFO] Preprocessing {label}...")
        validate_columns(df, ["Task Owner", "Closure Code 1", "Completed Date"], f"{label} Data")
        df = df.dropna(subset=["Task Owner", "Closure Code 1", "Completed Date"])
        df["Completed Date"] = pd.to_datetime(df["Completed Date"], errors="coerce")
        df = df.dropna(subset=["Completed Date"])
        df["Month"] = df["Completed Date"].dt.to_period("M").astype(str)
        df["Is Fail"] = df["Closure Code 1"].str.lower().str.contains("fail|failed|failure", na=False)
        print(f"[INFO] Finished preprocessing {label}. Remaining rows: {len(df)}")
        return df

    df_shawn = preprocess(df_shawn, "Shawn")
    df_barry = preprocess(df_barry, "Barry")

    # === Build HTML block per customer ===
    def customer_block(customer_id, df):
        print(f"[INFO] Generating HTML for customer: {customer_id}")
        global_html = generate_global_tab(df)
        individual_html = generate_individual_tab(df)
        scheduling_html = generate_scheduling_tab()
        lec_html = generate_lec_tab(df)
        failure_html = generate_failure_analysis_tab(df)

        print(f"[DEBUG] GlobalTab ID exists: {'id=\"globalTab\"' in global_html}")
        global_html = global_html.replace('id="globalTab"', f'id="globalTab-{customer_id}"')
        individual_html = individual_html.replace('id="individualTab"', f'id="individualTab-{customer_id}"')
        scheduling_html = scheduling_html.replace('id="schedulingTab"', f'id="schedulingTab-{customer_id}"')
        lec_html = lec_html.replace('id="lecTab"', f'id="lecTab-{customer_id}"')
        failure_html = failure_html.replace('id="failureTab"', f'id="failureTab-{customer_id}"')

        return f"""
        <div class="customer-container" id="customer-{customer_id}" style="display:{'block' if customer_id == 'shawn' else 'none'};">
          <div class="sidebar">
            <h2>{customer_id.capitalize()} Dashboard</h2>
            <button onclick="switchMainTab(event, 'globalTab-{customer_id}')">Global</button>
            <button onclick="switchMainTab(event, 'individualTab-{customer_id}')">Individual</button>
            <button onclick="switchMainTab(event, 'schedulingTab-{customer_id}')">Scheduling</button>
            <button onclick="switchMainTab(event, 'lecTab-{customer_id}')">LEC</button>
            <button onclick="switchMainTab(event, 'failureTab-{customer_id}')">Failure Analysis</button>
          </div>
          <div class="main-content">
            <h1>{customer_id.capitalize()} Data</h1>
            {global_html}
            {individual_html}
            {scheduling_html}
            {lec_html}
            {failure_html}
          </div>
        </div>
        """

    # === Customer selector dropdown ===
    customer_switcher_html = """
    <div class="customer-switcher">
      <label for="customer-select">Customer:</label>
      <select id="customer-select" onchange="switchCustomer(this.value)">
        <option value="shawn" selected>Shawn</option>
        <option value="barry">Barry</option>
      </select>
    </div>
    """

    # === Final HTML Assembly ===
    print("[INFO] Assembling full HTML output...")
    html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Multi-Customer Dashboard</title>
  <script src="plotly-latest.min.js"></script>
  <!-- CSS and style definitions (not shown again here for brevity) -->
  <style>
    /* CSS ... (keep your existing styles here) */
  </style>
  <script>
    function switchMainTab(evt, tabId) {{
      const currentCustomer = document.querySelector('.customer-container[style*="display: block"]');
      if (!currentCustomer) return;

      const tabs = currentCustomer.querySelectorAll('.main-tab');
      tabs.forEach(tab => tab.style.display = 'none');

      const tabToShow = currentCustomer.querySelector(`#${{tabId}}`);
      if (tabToShow) tabToShow.style.display = 'block';

      const buttons = currentCustomer.querySelectorAll('.sidebar button');
      buttons.forEach(btn => btn.classList.remove('active'));
      evt.currentTarget.classList.add('active');

      window.dispatchEvent(new Event('resize'));
    }}

    function switchCustomer(customerId) {{
      document.querySelectorAll('.customer-container').forEach(el => el.style.display = 'none');
      const target = document.getElementById(`customer-${{customerId}}`);
      if (target) target.style.display = 'block';

      const tabs = target.querySelectorAll('.main-tab');
      tabs.forEach(tab => tab.style.display = 'none');
      const firstTab = tabs[0];
      if (firstTab) firstTab.style.display = 'block';

      const sidebarButtons = target.querySelectorAll('.sidebar button');
      sidebarButtons.forEach(btn => btn.classList.remove('active'));
      if (sidebarButtons[0]) sidebarButtons[0].classList.add('active');

      window.dispatchEvent(new Event('resize'));
    }}

    window.onload = function () {{
      switchCustomer('shawn');
    }};
  </script>
</head>
<body>
  {customer_block("shawn", df_shawn)}
  {customer_block("barry", df_barry)}
  {customer_switcher_html}
</body>
</html>
"""

    # === Write HTML to File ===
    try:
        with open(EXPORT_HTML, "w", encoding="utf-8") as f:
            f.write(html)
        print(f"[SUCCESS] HTML exported to {EXPORT_HTML}")
    except Exception as e:
        print(f"[ERROR] Failed to write HTML file: {e}")

if __name__ == "__main__":
    main()
