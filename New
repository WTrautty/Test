def generate_failure_analysis_tab(df):
    import pandas as pd
    import numpy as np
    from scipy.stats import chi2_contingency, pearsonr
    import plotly.graph_objects as go

    # === Validate Required Columns ===
    required_cols = ["Revised LEC", "Closure Code 1", "Task Owner", "Completed Date"]
    if not all(col in df.columns for col in required_cols):
        return "<div id='failureTab' class='main-tab'><h2>Required columns not found.</h2></div>"

    # === Clean and Prepare Data ===
    df = df.copy()
    df["Revised LEC"] = df["Revised LEC"].fillna("Unknown").astype(str)
    df["Task Owner"] = df["Task Owner"].fillna("Unknown").astype(str)
    df["Is Fail"] = df["Closure Code 1"].str.lower().str.contains("fail|failed|failure", na=False).astype(int)
    df["Completed Date"] = pd.to_datetime(df["Completed Date"], errors="coerce")
    df = df.dropna(subset=["Completed Date"])
    df["Month"] = df["Completed Date"].dt.to_period("M").astype(str)

    # === CramÃ©r's V for Revised LEC ===
    lec_contingency = pd.crosstab(df["Revised LEC"], df["Is Fail"])
    lec_chi2, lec_p, _, _ = chi2_contingency(lec_contingency)
    lec_n = lec_contingency.sum().sum()
    lec_min_dim = min(lec_contingency.shape) - 1
    lec_cramers_v = np.sqrt(lec_chi2 / (lec_n * lec_min_dim)) if lec_min_dim > 0 else 0

    # === CramÃ©r's V for Task Owner ===
    owner_contingency = pd.crosstab(df["Task Owner"], df["Is Fail"])
    owner_chi2, owner_p, _, _ = chi2_contingency(owner_contingency)
    owner_n = owner_contingency.sum().sum()
    owner_min_dim = min(owner_contingency.shape) - 1
    owner_cramers_v = np.sqrt(owner_chi2 / (owner_n * owner_min_dim)) if owner_min_dim > 0 else 0

    # === Pearson correlation: monthly order volume vs failure rate ===
    monthly_data = df.groupby("Month").agg(
        Fail_Rate=("Is Fail", "mean"),
        Order_Count=("Is Fail", "count")
    ).reset_index()

    if len(monthly_data["Order_Count"].unique()) > 1:
        volume_corr, volume_p = pearsonr(monthly_data["Order_Count"], monthly_data["Fail_Rate"])
    else:
        volume_corr, volume_p = 0, 1

    volume_annotation = (
        f"Pearson r = {volume_corr:.3f}<br>p = {volume_p:.2e}<br><i>(Weak & Not Significant)</i>"
        if volume_p > 0.05 else
        f"Pearson r = {volume_corr:.3f}<br>p = {volume_p:.2e}"
    )

    # === Correlation Summary Bar Chart ===
    fig = go.Figure(data=[
        go.Bar(
            x=["Revised LEC", "Task Owner", "Monthly Volume"],
            y=[lec_cramers_v, owner_cramers_v, volume_corr],
            text=[
                f"CramÃ©r's V = {lec_cramers_v:.3f}<br>p = {lec_p:.2e}",
                f"CramÃ©r's V = {owner_cramers_v:.3f}<br>p = {owner_p:.2e}",
                volume_annotation
            ],
            textposition="auto",
            marker_color=["#3498db", "#f39c12", "#2ecc71"]
        )
    ])
    fig.update_layout(
        title="Failure Correlation Overview",
        yaxis_title="Association Strength (0 to 1)",
        yaxis=dict(range=[0, 1]),
        height=450
    )

    # === Line Chart: Monthly Failure Rate and Volume ===
    monthly_line = go.Figure()
    monthly_line.add_trace(go.Scatter(
        x=monthly_data["Month"],
        y=(monthly_data["Fail_Rate"] * 100),
        name="Failure Rate (%)",
        mode="lines+markers",
        yaxis="y1"
    ))
    monthly_line.add_trace(go.Scatter(
        x=monthly_data["Month"],
        y=monthly_data["Order_Count"],
        name="Order Volume",
        mode="lines+markers",
        yaxis="y2"
    ))
    monthly_line.update_layout(
        title="Monthly Failure Rate (%) and Order Volume",
        yaxis=dict(title="Failure Rate (%)", range=[0, 100]),
        yaxis2=dict(title="Order Volume", overlaying="y", side="right"),
        xaxis=dict(title="Month"),
        legend=dict(x=1, y=1, xanchor='right', yanchor='top'),
        height=400
    )
    monthly_line_html = monthly_line.to_html(full_html=False, include_plotlyjs=False)

    # === Horizontal Bar: Task Owner Failure Rates ===
    owner_failure_rate = df.groupby("Task Owner")["Is Fail"].mean().sort_values(ascending=True) * 100
    owner_fail_bar = go.Figure(go.Bar(
        x=owner_failure_rate.values,
        y=owner_failure_rate.index,
        orientation="h",
        marker_color="#e74c3c",
        text=[f"{v:.1f}%" for v in owner_failure_rate.values],
        textposition="auto"
    ))
    owner_fail_bar.update_layout(
        title="Overall Failure Rate per Task Owner",
        xaxis_title="Failure Rate (%)",
        height=500
    )
    owner_fail_bar_html = owner_fail_bar.to_html(full_html=False, include_plotlyjs=False)

    # === Optimization Projection Bar Chart (Static Best) ===
    lec_failure_rates = df.groupby("Revised LEC")["Is Fail"].mean()
    owner_failure_rates = df.groupby("Task Owner")["Is Fail"].mean()

    actual_failure_rate = df["Is Fail"].mean()

    best_lec = "Frontier"  # ðŸ‘ˆ Static selection
    best_owner = "Alice"   # ðŸ‘ˆ Static selection

    best_lec_rate = lec_failure_rates.get(best_lec, actual_failure_rate)
    best_owner_rate = owner_failure_rates.get(best_owner, actual_failure_rate)

    lec_diff = actual_failure_rate - best_lec_rate
    owner_diff = actual_failure_rate - best_owner_rate

    diff_fig = go.Figure(data=[
        go.Bar(
            x=[f"All Orders as {best_lec}", f"All Orders as {best_owner}"],
            y=[lec_diff * 100, owner_diff * 100],
            text=[f"{lec_diff * 100:.2f}%", f"{owner_diff * 100:.2f}%"],
            textposition="auto",
            marker_color=["#1abc9c", "#9b59b6"]
        )
    ])
    diff_fig.update_layout(
        title="Projected Reduction in Failure Rate from Selecting Preferred LEC or Task Owner",
        yaxis_title="Failure Rate Reduction (%)",
        height=400
    )
    diff_fig_html = diff_fig.to_html(full_html=False, include_plotlyjs=False)

    # === Return Assembled Tab HTML ===
    return f"""
    <div id="failureTab" class="main-tab">
      <h2>Failure Analysis</h2>
      <p>This chart shows the strength of statistical association between various factors and failure outcomes.<br>
      <small><i>Only Revised LEC showed a moderate, statistically significant correlation with failure rate.</i></small></p>

      {fig.to_html(full_html=False, include_plotlyjs=False)}

      <hr>
      <h3>Monthly Failure Rate and Order Volume</h3>
      {monthly_line_html}

      <hr>
      <h3>Failure Rate by Task Owner</h3>
      {owner_fail_bar_html}

      <hr>
      <h3>Projected Failure Rate Reduction if Optimized</h3>
      {diff_fig_html}
    </div>
    """
