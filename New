def generate_frat_tab(frat_df):
    import pandas as pd
    import plotly.graph_objects as go

    frat_df = frat_df.copy()
    frat_df['Create Date'] = pd.to_datetime(frat_df['Create Date'], errors='coerce')
    frat_df['Completed Date'] = pd.to_datetime(frat_df['Completed Date'], errors='coerce')
    frat_df = frat_df.dropna(subset=['Create Date', 'Completed Date', 'Task Owner'])

    frat_df['Days to Close'] = (frat_df['Completed Date'] - frat_df['Create Date']).dt.days
    frat_df = frat_df[frat_df['Days to Close'] >= 0]
    frat_df['Month'] = frat_df['Completed Date'].dt.to_period('M').astype(str)

    top_owners = [
        "Mclean, Jordan (Jordan)",
        "Lang, Nicholas (Nicholas)",
        "Gray, Christopher (Chris)"
    ]

    def create_bar_chart(data, owner_label):
        monthly_stats = data.groupby('Month').agg(
            Avg_Close=('Days to Close', 'mean'),
            Median_Close=('Days to Close', 'median'),
            P90_Close=('Days to Close', lambda x: x.quantile(0.9))
        ).reset_index()

        fig = go.Figure()
        fig.add_trace(go.Bar(x=monthly_stats['Month'], y=monthly_stats['Avg_Close'], name='Mean'))
        fig.add_trace(go.Bar(x=monthly_stats['Month'], y=monthly_stats['Median_Close'], name='Median'))
        fig.add_trace(go.Bar(x=monthly_stats['Month'], y=monthly_stats['P90_Close'], name='90th Percentile'))

        fig.update_layout(
            barmode='group',
            title=f"Days to Close (Mean/Median/P90) - {owner_label}",
            height=350,
            xaxis_title='Month',
            yaxis_title='Days'
        )
        return fig.to_html(full_html=False, include_plotlyjs=False)

    def create_line_chart(label):
        fig = go.Figure()
        global_monthly = frat_df.groupby('Month').size().reset_index(name='Closed')
        fig.add_trace(go.Scatter(
            x=global_monthly['Month'],
            y=global_monthly['Closed'],
            mode='lines+markers',
            name="Global Total"
        ))

        for owner in top_owners:
            sub = frat_df[frat_df['Task Owner'] == owner]
            sub_monthly = sub.groupby('Month').size().reset_index(name='Closed')
            fig.add_trace(go.Scatter(
                x=sub_monthly['Month'],
                y=sub_monthly['Closed'],
                mode='lines+markers',
                name=owner
            ))

        fig.update_layout(
            title=f"Tasks Closed per Month â€“ {label}",
            height=300,
            xaxis_title='Month',
            yaxis_title='Closed Count'
        )
        return fig.to_html(full_html=False, include_plotlyjs=False)

    def create_mean_comparison_chart():
        owners = ['Global'] + top_owners
        means = []

        global_mean = frat_df['Days to Close'].mean()
        means.append(global_mean)

        for owner in top_owners:
            owner_df = frat_df[frat_df['Task Owner'] == owner]
            means.append(owner_df['Days to Close'].mean())

        fig = go.Figure(go.Bar(
            x=owners,
            y=means,
            text=[f"{x:.1f}d" for x in means],
            textposition="auto",
            marker_color=['#2c3e50', '#2980b9', '#f39c12', '#e74c3c']
        ))

        fig.update_layout(
            title="Average Days to Close (Global vs Top 3)",
            height=350,
            yaxis_title="Days"
        )
        return fig.to_html(full_html=False, include_plotlyjs=False)

    # === Global Tab ===
    global_bar = create_bar_chart(frat_df, 'Global')
    global_line = create_line_chart('Global')
    global_comparison = create_mean_comparison_chart()

    buttons = [f'<button class="tablink" onclick="openTab(event, \'frat_tab_global\')">Global</button>']
    contents = [f'''
        <div id="frat_tab_global" class="tabcontent" style="display:block">
          {global_bar}
          <hr>{global_comparison}
          <hr>{global_line}
        </div>''']

    # === Owner Tabs ===
    for i, owner in enumerate(top_owners):
        owner_df = frat_df[frat_df['Task Owner'] == owner]
        if owner_df.empty:
            bar_html = "<p>No data available.</p>"
        else:
            bar_html = create_bar_chart(owner_df, owner)

        line_html = create_line_chart(owner)
        comparison_html = create_mean_comparison_chart()

        div_id = f"frat_tab_{i}"
        buttons.append(f'<button class="tablink" onclick="openTab(event, \'{div_id}\')">{owner}</button>')
        contents.append(f'''
        <div id="{div_id}" class="tabcontent" style="display:none">
          {bar_html}
          <hr>{comparison_html}
          <hr>{line_html}
        </div>''')

    return f"""
    <div id='fratTab' class='main-tab'>
      <h2>FRAT Task Closure Analysis</h2>
      <div class='tab-buttons-wrapper'>{''.join(buttons)}</div>
      {''.join(contents)}
    </div>
    """
