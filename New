import openpyxl
import numpy as np
import warnings
from openpyxl import Workbook
import os
from datetime import datetime
import pandas as pd
import hashlib
import re
import traceback

# ---------------- Configuration ----------------

EXCEL_FILE = r"C:\Users\AD39644\OneDrive - Lumen\Department_of_the_Interior_-_General_Asset_Inventory_Oct2023 (1) (1) (1) Query.xlsx"
LASER_FILE = r"C:\Users\AD39644\Downloads\LASER Export 2-27.xlsx"

# Suppress openpyxl warnings about cell errors 
warnings.simplefilter("ignore", category=UserWarning)

# Define the sheets and columns to search for order numbers 
SEARCH_CONFIG = {
    "Main": {
        "search_columns": ["Ops Console Ticket"],
        "extract_columns": [
            "Ops Console Ticket",
            "IPv6 Status",
            "Service ID",
            "IPv6 WAN",
            "IPv6 LAN",
            "IPv6 Loopback",
            "DOI_Bureau",
            "WHD_Location",
            "Node Name",
            "IP Address",
            "Address",
            "City",
            "State",
            "Vendor",
            "iSE Design Link",
        ]
    },
}

SEARCH_LASER = {
    "Sheet1": {
        "service_match": ["circuitID"],
        "extract_columns": ["device", "interface", "scid", "location", "ipv4", "vrf"]
    },
}

# ---------------- Helper Functions ----------------

def identify_region(wan_ipv6):
    try:
        return wan_ipv6.split(":")[2][1]
    except IndexError:
        return None

def lan_subnet_fix(lan_ipv6):
    try:
        address, subnet = lan_ipv6.split("/")
        hex_groups = address.split(":")
        if len(hex_groups[3]) == 3:
            hex_groups[3] = "0" + hex_groups[3]
        return ":".join(hex_groups) + "/56"
    except Exception:
        return None

def ce_wan_address(ce_wan_ipv6):
    try:
        address, subnet = ce_wan_ipv6.split("/")
        hex_groups = address.split(":")
        hex_groups[-1] = format(int(hex_groups[-1], 16) + 1, "x")
        return ":".join(hex_groups) + f"/{subnet}"
    except Exception:
        return None

def j_barton(lan_ipv6):
    try:
        address = lan_ipv6.split("/")[0]
        return address + "[0-3]"
    except Exception:
        return None

def ipv6_region_map(ipv6_region):
    mapping = {
        "1": "East",
        "2": "North",
        "3": "Central",
        "4": "West",
        "5": "Alaska"
    }
    return mapping.get(ipv6_region, "unknown")

def md_pw_map(ipv6_region):
    mapping = {
        "1": "5CB60CDAE77980D14277994BB",
        "2": "17A75FE44D8F532715E369E86",
        "3": "A78BA5E3FFFB4F9FE4DDEFC2D",
        "4": "38CE4A74D0004E037471A27B9",
        "5": "D4196D7DF1087CA41E8B5CF72"
    }
    return mapping.get(ipv6_region, "unknown")

def juniper_RI_map(ipv6_region):
    mapping = {
       "1": "8192-1-EIS0176-2006932628-L3VPN",
       "2": "8193-1-EIS0176-2006932629-L3VPN",
       "3": "8194-1-EIS0176-2006932623-L3VPN",
       "4": "8195-1-EIS0176-2006932630-L3VPN",
       "5": "UNKNOWN"
    }
    return mapping.get(ipv6_region, "unknown")

def Nokia_vprn_map(ipv6_region):
    mapping = {
       "1": "22826008",
       "2": "22826009",
       "3": "22826010",
       "4": "22826011",
       "5": "UNKNOWN"
    }
    return mapping.get(ipv6_region, "unknown")

def find_header_row(sheet):
    data = np.array([row for row in sheet.iter_rows(min_row=1, max_row=20, values_only=True)], dtype=object)
    for row_idx, row in enumerate(data, start=1):
        non_empty_cells = np.count_nonzero(row)
        if non_empty_cells > 2:
            return list(row), row_idx
    return None, None

def get_all_orders():
    results = []
    for sheet_name, config in SEARCH_CONFIG.items():
        if sheet_name in wb_main.sheetnames:
            ws = wb_main[sheet_name]
            header_row, header_row_idx = find_header_row(ws)
            if not header_row:
                continue
            headers = {str(cell).replace('\n', ' '): idx for idx, cell in enumerate(header_row) if cell}
            search_cols = [header for header in headers 
                           if any(header.startswith(col) for col in config["search_columns"]) 
                           and header not in ["", "0"]]
            extract_cols = [header for header in headers if any(header.startswith(col) for col in config["extract_columns"])]
            for row in ws.iter_rows(min_row=header_row_idx + 1, values_only=True):
                for search_col in search_cols:
                    cell_val = row[headers[search_col]]
                    if cell_val is not None and str(cell_val).strip() not in ["", "0"]:
                        data = {col: row[idx] for col, idx in headers.items() if col in extract_cols}
                        results.append({"Sheet": sheet_name, "Data": data})
                        break
    return results

def search_circuit(Service_ID):
    results = []
    for sheet_name, config in SEARCH_LASER.items():
        if sheet_name in wb_laser.sheetnames:
            ws = wb_laser[sheet_name]
            header_row, header_row_idx = find_header_row(ws)
            if not header_row:
                continue
            headers = {str(cell).replace('\n', ' '): idx for idx, cell in enumerate(header_row) if cell}
            search_key = config.get("service_match", config.get("search_columns", []))
            search_cols = [header for header in headers if any(header.lower().startswith(col.lower()) for col in search_key)]
            extract_cols = [header for header in headers if any(header.lower().startswith(col.lower()) for col in config["extract_columns"])]
            if not search_cols:
                continue
            for row in ws.iter_rows(min_row=header_row_idx + 1, values_only=True):
                for col_name in search_cols:
                    col_idx = headers[col_name]
                    cell_value = str(row[col_idx]) if row[col_idx] is not None else ""
                    if Service_ID.lower() in cell_value.lower():
                        data = {col: row[idx] for col, idx in headers.items() if col in extract_cols}
                        results.append({"Sheet": sheet_name, "Data": data})
    return results

def get_default_interface(laser_matches, ipv6_region):
    target_suffix = f"80{ipv6_region}"
    for lm in laser_matches:
        interface_val = str(lm["Data"].get("interface", "")).strip()
        if interface_val.lower().endswith(target_suffix.lower()):
            default_device = str(lm["Data"].get("device", "")).strip()
            default_scid = str(lm["Data"].get("scid", "")).strip()
            default_location = str(lm["Data"].get("location", "")).strip()
            default_wan_ip = str(lm["Data"].get("ipv4", "")).strip()
            default_vrf = str(lm["Data"].get("vrf", "")).strip()
            return interface_val, default_device, default_scid, default_location, default_wan_ip, default_vrf
    return "", "", "", "", "", ""

# ---------------- Main ----------------

order_input = input("Enter the Ops Console Ticket to process: ").strip()

try:
    wb_main = openpyxl.load_workbook(EXCEL_FILE, read_only=True)
except FileNotFoundError:
    print(f"Error [E001]: The main file '{EXCEL_FILE}' was not found. Please verify the file path and try again.")
    exit()

all_orders = [order for order in get_all_orders() if str(order["Data"].get("Ops Console Ticket", "")).strip() == order_input]
wb_main.close()

if not all_orders:
    print(f"No matching order found for: {order_input}")
    exit()

try:
    wb_laser = openpyxl.load_workbook(LASER_FILE, read_only=True)
except FileNotFoundError:
    print(f"Error [E002]: The LASER file '{LASER_FILE}' was not found. Please verify the file path and try again.")
    exit()

current_date = datetime.now().strftime("%Y-%m-%d")
output_directory = fr"C:\Users\AD39644\IPv6_Test_Files\{current_date}"
os.makedirs(output_directory, exist_ok=True)

# Remaining logic continues...
