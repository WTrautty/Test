import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import os
from plotly.subplots import make_subplots

# === Configuration ===
EXCEL_PATH = r"C:\Users\AD39644\Downloads\data (5).xlsx"
EXPORT_HTML = r"C:\Users\AD39644\OneDrive - Lumen\Federal Service Delivery - Scripting Archive\Dashboards.html"
TAB_MIN_ENTRIES = 40
top_performer_name = "Davis, Walter (Walter)"
top_label = "Top Performer"

# === Load and preprocess data ===
df = pd.read_excel(EXCEL_PATH, engine='openpyxl')
df = df[['Task Owner', 'Closure Code 1', 'Completed Date']].dropna()
df['Completed Date'] = pd.to_datetime(df['Completed Date'], errors='coerce')
df = df.dropna(subset=['Completed Date'])
df['Month'] = df['Completed Date'].dt.to_period('M').astype(str)

owner_counts = df['Task Owner'].value_counts()
valid_owners = owner_counts[owner_counts >= TAB_MIN_ENTRIES].index.tolist()

monthly_totals = df.groupby(['Month', 'Task Owner']).size().reset_index(name='Count')
global_avg = monthly_totals.groupby('Month')['Count'].mean().reset_index(name='Average')

tab_buttons = []
tab_contents = []

for i, owner in enumerate(valid_owners):
    div_id = f"tab{i}"
    owner_data = df[df['Task Owner'] == owner]
    top_data = df[df['Task Owner'] == top_performer_name]

    # PIE CHART
    owner_pie = owner_data['Closure Code 1'].value_counts(normalize=True) * 100
    top_pie = top_data['Closure Code 1'].value_counts(normalize=True) * 100
    all_codes = set(owner_pie.index).union(set(top_pie.index))
    owner_pie = owner_pie.reindex(all_codes, fill_value=0)
    top_pie = top_pie.reindex(all_codes, fill_value=0)

    pie_df = owner_pie.reset_index()
    pie_df.columns = ['Closure Code', 'Owner %']
    pie_fig = px.pie(pie_df, names='Closure Code', values='Owner %',
                     title=f"{owner}'s Closure Code Distribution")
    pie_fig.update_layout(height=400, margin=dict(t=60, l=20, r=20, b=20))

    # DIVERGING BAR CHART
    delta_df = pd.DataFrame({
        'Closure Code': list(all_codes),
        'Owner %': [owner_pie[code] for code in all_codes],
        'Top %': [top_pie[code] for code in all_codes]
    })
    delta_df['Delta'] = delta_df['Owner %'] - delta_df['Top %']
    delta_df.sort_values('Delta', inplace=True)

    marker_colors = [
        (
            'green' if ('successful' in str(code).lower() and delta >= 0)
            else 'crimson' if ('successful' in str(code).lower() and delta < 0)
            else 'green' if ('fail' in str(code).lower() and delta < 0)
            else 'crimson' if ('fail' in str(code).lower() and delta >= 0)
            else 'blue'
        )
        for code, delta in zip(delta_df['Closure Code'], delta_df['Delta'])
    ]

    delta_fig = go.Figure()
    delta_fig.add_trace(go.Bar(
        y=delta_df['Closure Code'],
        x=delta_df['Delta'],
        orientation='h',
        marker_color=marker_colors,
        hovertemplate='Difference: %{x:.1f}%<extra></extra>'
    ))
    delta_fig.update_layout(
        title=f"{owner} vs {top_label} ‚Äì Closure Code Usage Difference",
        xaxis_title="Percentage Difference (%)",
        xaxis=dict(range=[-20, 20]),
        yaxis_title="Closure Code",
        height=450,
        autosize=True,
        margin=dict(t=60, l=40, r=40, b=40),
        showlegend=False
    )
    delta_html = delta_fig.to_html(full_html=False, include_plotlyjs=(i == 0), config={'responsive': True})

    # COLOR-CODED BULLETS
    annotation_html = "<div><h3>Closure Code Insights</h3><ul style='padding-left: 20px;'>"
    for _, row in delta_df.iterrows():
        code = str(row['Closure Code']).lower()
        delta = row['Delta']
        direction = 'more' if delta > 0 else 'less'

        if 'successful' in code:
            color = 'green' if delta > 0 else 'crimson'
        elif 'fail' in code:
            color = 'green' if delta < 0 else 'crimson'
        else:
            color = 'blue'

        annotation_html += f"<li style='margin-bottom: 6px; color:{color}'>" \
                           f"You use '<b>{row['Closure Code']}</b>' {abs(delta):.1f}% {direction} than the {top_label}." \
                           f"</li>"
    annotation_html += "</ul></div>"

    delta_section_html = f"""
    <div style="display: flex; flex-wrap: wrap; gap: 40px; align-items: flex-start;">
        <div style="flex: 1 1 50%;">{delta_html}</div>
        <div style="flex: 1 1 45%; min-width: 300px;">{annotation_html}</div>
    </div>
    """

    # LINE CHART: Completed Tasks
    owner_monthly = owner_data.groupby('Month').size().reset_index(name='Completed')
    top_monthly = top_data.groupby('Month').size().reset_index(name='Completed')

    line_fig = go.Figure()
    line_fig.add_trace(go.Scatter(
        x=owner_monthly['Month'],
        y=owner_monthly['Completed'],
        mode='lines+markers',
        name=f'{owner} Monthly Completed',
        line=dict(color='blue')
    ))
    line_fig.add_trace(go.Scatter(
        x=top_monthly['Month'],
        y=top_monthly['Completed'],
        mode='lines+markers',
        name=f'{top_label} Monthly Completed',
        line=dict(color='green', dash='dash')
    ))
    line_fig.add_trace(go.Scatter(
        x=global_avg['Month'],
        y=global_avg['Average'],
        mode='lines+markers',
        name='Global Monthly Average',
        line=dict(color='red', dash='dash')
    ))
    line_fig.update_layout(
        title=f"{owner} ‚Äì Monthly Completed Tasks vs {top_label} & Global Avg",
        xaxis_title='Month',
        yaxis_title='Tasks Completed',
        height=500,
        margin=dict(t=60, l=40, r=40, b=40),
        hovermode='x unified'
    )
    line_html = line_fig.to_html(full_html=False, include_plotlyjs=False, config={'responsive': True})

    # LINE CHART: % Fail
    fail_data = owner_data.copy()
    fail_data['Is Fail'] = fail_data['Closure Code 1'].str.lower().str.contains('fail')
    monthly_total = fail_data.groupby('Month').size()
    monthly_fails = fail_data.groupby('Month')['Is Fail'].sum()
    owner_fail_pct = (monthly_fails / monthly_total * 100).reset_index(name='Fail %')

    df['Is Fail'] = df['Closure Code 1'].str.lower().str.contains('fail')
    global_fail = df.groupby(['Month', 'Task Owner'])['Is Fail'].mean().reset_index()
    global_avg_fail = global_fail.groupby('Month')['Is Fail'].mean().reset_index()
    global_avg_fail.columns = ['Month', 'Global Avg Fail %']
    global_avg_fail['Global Avg Fail %'] *= 100

    top_data['Is Fail'] = top_data['Closure Code 1'].str.lower().str.contains('fail')
    top_fails = top_data.groupby('Month')['Is Fail'].sum()
    top_total = top_data.groupby('Month').size()
    top_fail_pct = (top_fails / top_total * 100).reset_index(name='Top Performer Fail %')

    fail_merged = pd.merge(owner_fail_pct, global_avg_fail, on='Month', how='outer')
    fail_merged = pd.merge(fail_merged, top_fail_pct, on='Month', how='outer').sort_values('Month')

    fail_fig = go.Figure()
    fail_fig.add_trace(go.Scatter(
        x=fail_merged['Month'],
        y=fail_merged['Fail %'],
        mode='lines+markers',
        name=f"{owner} % Fail",
        line=dict(color='blue')
    ))
    fail_fig.add_trace(go.Scatter(
        x=fail_merged['Month'],
        y=fail_merged['Top Performer Fail %'],
        mode='lines+markers',
        name=f"{top_label} % Fail",
        line=dict(color='green', dash='dash')
    ))
    fail_fig.add_trace(go.Scatter(
        x=fail_merged['Month'],
        y=fail_merged['Global Avg Fail %'],
        mode='lines+markers',
        name="Global Avg % Fail",
        line=dict(color='red', dash='dash')
    ))
    fail_fig.update_layout(
        title=f"{owner} ‚Äì Percent of Orders Marked as 'Fail' vs {top_label} & Global Avg",
        xaxis_title='Month',
        yaxis_title='Failure Rate (%)',
        yaxis=dict(range=[0, 100]),
        height=400,
        margin=dict(t=60, l=40, r=40, b=40),
        hovermode='x unified'
    )
    fail_html = fail_fig.to_html(full_html=False, include_plotlyjs=False, config={'responsive': True})

    # Add badge if top performer
    badge = " üèÜ" if owner == top_performer_name else ""
    tab_buttons.append(f'<button class="tablink" onclick="openTab(event, \'{div_id}\')">{owner}{badge}</button>')
    tab_contents.append(f"""
    <div id="{div_id}" class="tabcontent" style="display:{"block" if i == 0 else "none"}">
        {pie_fig.to_html(full_html=False, include_plotlyjs=(i == 0), config={'responsive': True})}
        <hr>{delta_section_html}
        <hr>{line_html}
        <hr>{fail_html}
    </div>
    """)

# Final HTML Output
html_output = f"""
<html>
<head>
    <title>Closure Code Dashboard</title>
    <script>
    function openTab(evt, tabName) {{
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {{
            tabcontent[i].style.display = "none";
        }}
        tablinks = document.getElementsByClassName("tablink");
        for (i = 0; i < tablinks.length; i++) {{
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }}
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
        setTimeout(() => {{ window.dispatchEvent(new Event('resize')); }}, 200);
    }}
    window.addEventListener('load', function () {{
        setTimeout(() => {{ window.dispatchEvent(new Event('resize')); }}, 300);
    }});
    </script>
    <style>
        body {{
            font-family: sans-serif;
            background-color: #f9f9f9;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
        }}
        .tablink {{
            background-color: #ddd;
            border: none;
            cursor: pointer;
            padding: 10px 20px;
            font-size: 16px;
            margin: 2px;
        }}
        .tablink.active {{
            background-color: #bbb;
        }}
        .tabcontent {{
            display: none;
            width: 100%;
            max-width: 1400px;
            background: white;
            margin: 0 auto 30px;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.05);
            border-radius: 8px;
        }}
        .tab-buttons-wrapper {{
            text-align: center;
            margin-top: 10px;
        }}
    </style>
</head>
<body>
    <h1>Closure Code Dashboard</h1>
    <div class="tab-buttons-wrapper">{''.join(tab_buttons)}</div>
    {''.join(tab_contents)}
</body>
</html>
"""

with open(EXPORT_HTML, 'w', encoding='utf-8') as f:
    f.write(html_output)

print(f"‚úÖ Dashboard created at: {EXPORT_HTML}")
