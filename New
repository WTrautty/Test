import openpyxl
import numpy as np
import warnings
from openpyxl import Workbook
import os
from datetime import datetime
import pandas as pd
import hashlib
import re
import traceback

# ---------------- Configuration ----------------

EXCEL_FILE = r"C:\Users\AD39644\OneDrive - Lumen\Department_of_the_Interior_-_General_Asset_Inventory_Oct2023 (1) (1) (1) Query.xlsx"
LASER_FILE = r"C:\Users\AD39644\Downloads\LASER Export 2-27.xlsx"
SCHEDULER_EXCEL = r"C:\Users\AD39644\OneDrive - Lumen\General - DOI Remote VPNS Activations\Lumen_DOI Remote VPNS Activations Tracker.xlsx"

print(f"Using file path: {EXCEL_FILE}")

warnings.simplefilter("ignore", category=UserWarning)

SEARCH_CONFIG = {
    "Main": {
        "search_columns": ["Ops Console Ticket"],
        "extract_columns": [
            "Ops Console Ticket", "IPv6 Status", "Service ID", "IPv6 WAN", "IPv6 LAN", "IPv6 Loopback",
            "DOI_Bureau", "WHD_Location", "Node Name", "IP Address", "Address", "City", "State", "Vendor",
            "iSE Design Link",
        ]
    },
}

SEARCH_LASER = {
    "Sheet1": {
        "service_match": ["circuitID"],
        "extract_columns": ["device", "interface", "scid", "location", "ipv4", "vrf"]
    },
}

# ---------------- Helper Functions ----------------

def identify_region(wan_ipv6):
    try:
        return wan_ipv6.split(":")[2][1]
    except IndexError:
        return None

def lan_subnet_fix(lan_ipv6):
    try:
        address, subnet = lan_ipv6.split("/")
        hex_groups = address.split(":")
        if len(hex_groups[3]) == 3:
            hex_groups[3] = "0" + hex_groups[3]
        return ":".join(hex_groups) + "/56"
    except Exception:
        return None

def ce_wan_address(ce_wan_ipv6):
    try:
        address, subnet = ce_wan_ipv6.split("/")
        hex_groups = address.split(":")
        hex_groups[-1] = format(int(hex_groups[-1], 16) + 1, "x")
        return ":".join(hex_groups) + f"/{subnet}"
    except Exception:
        return None

def j_barton(lan_ipv6):
    try:
        address = lan_ipv6.split("/")[0]
        return address + "[0-3]"
    except Exception:
        return None

def ipv6_region_map(ipv6_region):
    return {
        "1": "East", "2": "North", "3": "Central", "4": "West", "5": "Alaska"
    }.get(ipv6_region, "unknown")

def md_pw_map(ipv6_region):
    return {
        "1": "5CB60CDAE77980D14277994BB", "2": "17A75FE44D8F532715E369E86",
        "3": "A78BA5E3FFFB4F9FE4DDEFC2D", "4": "38CE4A74D0004E037471A27B9", "5": "D4196D7DF1087CA41E8B5CF72"
    }.get(ipv6_region, "unknown")

def juniper_RI_map(ipv6_region):
    return {
        "1": "8192-1-EIS0176-2006932628-L3VPN", "2": "8193-1-EIS0176-2006932629-L3VPN",
        "3": "8194-1-EIS0176-2006932623-L3VPN", "4": "8195-1-EIS0176-2006932630-L3VPN", "5": "UNKNOWN"
    }.get(ipv6_region, "unknown")

def Nokia_vprn_map(ipv6_region):
    return {
        "1": "22826008", "2": "22826009", "3": "22826010", "4": "22826011", "5": "UNKNOWN"
    }.get(ipv6_region, "unknown")

def find_header_row(sheet):
    data = np.array([row for row in sheet.iter_rows(min_row=1, max_row=20, values_only=True)], dtype=object)
    for row_idx, row in enumerate(data, start=1):
        if np.count_nonzero(row) > 2:
            return list(row), row_idx
    return None, None

def get_all_orders():
    results = []
    for sheet_name, config in SEARCH_CONFIG.items():
        if sheet_name in wb_main.sheetnames:
            ws = wb_main[sheet_name]
            header_row, header_row_idx = find_header_row(ws)
            if not header_row:
                continue
            headers = {str(cell).replace('\n', ' '): idx for idx, cell in enumerate(header_row) if cell}
            search_cols = [h for h in headers if any(h.startswith(col) for col in config["search_columns"])]
            extract_cols = [h for h in headers if h in config["extract_columns"]]
            for row in ws.iter_rows(min_row=header_row_idx + 1, values_only=True):
                for search_col in search_cols:
                    val = row[headers[search_col]]
                    if val and str(val).strip() not in ["", "0"]:
                        data = {col: row[idx] for col, idx in headers.items() if col in extract_cols}
                        results.append({"Sheet": sheet_name, "Data": data})
                        break
    return results

def search_circuit(Service_ID):
    results = []
    for sheet_name, config in SEARCH_LASER.items():
        if sheet_name in wb_laser.sheetnames:
            ws = wb_laser[sheet_name]
            header_row, header_row_idx = find_header_row(ws)
            if not header_row:
                continue
            headers = {str(cell).replace('\n', ' '): idx for idx, cell in enumerate(header_row) if cell}
            search_key = config.get("service_match", [])
            search_cols = [h for h in headers if any(h.lower().startswith(col.lower()) for col in search_key)]
            extract_cols = [h for h in headers if any(h.lower().startswith(col.lower()) for col in config["extract_columns"])]
            for row in ws.iter_rows(min_row=header_row_idx + 1, values_only=True):
                for col_name in search_cols:
                    col_idx = headers[col_name]
                    val = str(row[col_idx]) if row[col_idx] else ""
                    if Service_ID.lower() in val.lower():
                        data = {col: row[idx] for col, idx in headers.items() if col in extract_cols}
                        results.append({"Sheet": sheet_name, "Data": data})
    return results

def get_default_interface(matches, region):
    target = f"80{region}"
    for m in matches:
        iface = str(m["Data"].get("interface", "")).strip()
        if iface.lower().endswith(target.lower()):
            return (
                iface, m["Data"].get("device", ""), m["Data"].get("scid", ""), m["Data"].get("location", ""),
                m["Data"].get("ipv4", ""), m["Data"].get("vrf", "")
            )
    return "", "", "", "", "", ""

# ---------------- Main Execution ----------------

try:
    wb_main = openpyxl.load_workbook(EXCEL_FILE, read_only=True)
except FileNotFoundError:
    print(f"Main file not found: {EXCEL_FILE}")
    exit()

all_orders = get_all_orders()
wb_main.close()

user_order_number = input("Enter the order number (Ops Console Ticket) to process: ").strip()
target_order = next((o for o in all_orders if str(o["Data"].get("Ops Console Ticket", "")).strip() == user_order_number), None)

if not target_order:
    print(f"Order number '{user_order_number}' not found.")
    exit()

try:
    wb_laser = openpyxl.load_workbook(LASER_FILE, read_only=True)
except FileNotFoundError:
    print(f"LASER file not found: {LASER_FILE}")
    exit()

if os.path.exists(SCHEDULER_EXCEL):
    try:
        df_sched = pd.read_excel(SCHEDULER_EXCEL, sheet_name="IPV6", dtype=str)
        scheduler_lookup = {
            str(row.get("OPS Ticket#", "")).strip(): {
                "Activation Technician": str(row.get("Activation Technician", "")).strip(),
                "STATUS": str(row.get("STATUS", "")).strip()
            } for _, row in df_sched.iterrows()
        }
    except:
        scheduler_lookup = {}
else:
    scheduler_lookup = {}

order = target_order
data = order["Data"]
order_number = str(data.get("Ops Console Ticket", "")).strip()
current_date = datetime.now().strftime("%Y-%m-%d")
output_directory = fr"C:\Users\AD39644\IPv6_Test_Files\{current_date}"
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

try:
    service_id = str(data.get("Service ID", "")).strip()
    ipv6_region = identify_region(data.get("IPv6 WAN", ""))
    fixed_lan = lan_subnet_fix(data.get("IPv6 LAN", ""))
    ce_wan = ce_wan_address(data.get("IPv6 WAN", ""))
    area = ipv6_region_map(ipv6_region)
    md_pw = md_pw_map(ipv6_region)
    jRI = juniper_RI_map(ipv6_region)
    vprn = Nokia_vprn_map(ipv6_region)
    j_bar = j_barton(data.get("IPv6 LAN", ""))
    vendor = data.get("Vendor", "").strip()

    laser_matches = search_circuit(service_id)
    default_interface, default_device, default_scid, default_location, default_wan_ip, default_vrf = get_default_interface(laser_matches, ipv6_region)

    # Choose template
    if default_device.upper().startswith("ESP"):
        pe_type = "Alcatel"
        template_path = r"C:\Users\AD39644\Service Information ESP FORT.txt" if vendor.upper().startswith("FORT") else r"C:\Users\AD39644\Service Information ESP.txt"
    else:
        pe_type = "Juniper"
        if default_interface.upper().startswith("LSQ"):
            template_path = r"C:\Users\AD39644\Service Information Juno LSQ FORT.txt" if vendor.upper().startswith("FORT") else r"C:\Users\AD39644\Service Information Juno LSQ.txt"
        else:
            template_path = r"C:\Users\AD39644\Service Information Juno T1 FORT.txt" if vendor.upper().startswith("FORT") else r"C:\Users\AD39644\Service Information Juno T1.txt"

    with open(template_path, 'r', encoding='utf-8') as f:
        template = f.read()

    # Placeholder replacements (same as before) ...
    # Insert all the .replace(...) lines from your original script here.

    # For brevity, we're skipping the replacement block here (you already have it).

    output_filename = f"{order_number.replace('/', '_')} - {current_date} - Pre-Checks.txt"
    with open(os.path.join(output_directory, output_filename), 'w', encoding='utf-8') as f:
        f.write(template)
    print(f"Created: {output_filename}")

except Exception as e:
    traceback.print_exc()
    print(f"Failed to process order {order_number}")
