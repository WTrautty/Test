def generate_frat_tab(frat_df):
    import pandas as pd
    import plotly.graph_objects as go

    # Ensure dates are datetime
    frat_df = frat_df.copy()
    frat_df['Create Date'] = pd.to_datetime(frat_df['Create Date'], errors='coerce')
    frat_df['Completed Date'] = pd.to_datetime(frat_df['Completed Date'], errors='coerce')

    # Drop rows missing critical data
    frat_df = frat_df.dropna(subset=['Create Date', 'Completed Date', 'Task Owner'])

    # Compute days to close
    frat_df['Days to Close'] = (frat_df['Completed Date'] - frat_df['Create Date']).dt.days
    frat_df = frat_df[frat_df['Days to Close'] >= 0]

    # Extract month from Completed Date
    frat_df['Month'] = frat_df['Completed Date'].dt.to_period('M').astype(str)

    # Static task owners
    top_owners = ["Mclean, Jordan (Jordan)", "Lang, Nicholas (Nicholas)", "Gray, Christopher (Chris)"]

    def create_bar_chart(data, owner_label):
        monthly = data.groupby('Month')['Days to Close'].mean().reset_index()
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=monthly['Month'],
            y=monthly['Days to Close'],
            name='Average Days to Close'
        ))
        fig.update_layout(
            title=f"Average Days to Close - {owner_label}",
            height=400,
            xaxis_title="Month",
            yaxis_title="Days"
        )
        return fig.to_html(full_html=False, include_plotlyjs=False)

    # Global tab chart
    global_chart = create_bar_chart(frat_df, "Global")

    buttons = [
        f'<button class="tablink" onclick="openTab(event, \'frat_tab_global\')">Global</button>'
    ]
    contents = [
        f'<div id="frat_tab_global" class="tabcontent" style="display:block">{global_chart}</div>'
    ]

    for i, owner in enumerate(top_owners):
        owner_df = frat_df[frat_df['Task Owner'] == owner]
        chart_html = create_bar_chart(owner_df, owner)
        div_id = f"frat_tab_{i}"
        buttons.append(f'<button class="tablink" onclick="openTab(event, \'{div_id}\')">{owner}</button>')
        contents.append(f'<div id="{div_id}" class="tabcontent" style="display:none">{chart_html}</div>')

    html_output = f"""
    <div id="fratTab" class="main-tab">
      <h2>FRAT Task Closure Analysis</h2>
      <div class="tab-buttons-wrapper">{''.join(buttons)}</div>
      {''.join(contents)}
    </div>
    """
    return html_output

def main():
    try:
        df = pd.read_excel(EXCEL_PATH, engine="openpyxl")
    except Exception:
        raise

    try:
        frat_df = pd.read_excel(FRAT_PATH, engine="openpyxl")
    except Exception as e:
        raise RuntimeError(f"Failed to load FRAT Excel file: {e}")

    required_cols = ["Task Owner", "Closure Code 1", "Completed Date"]
    validate_columns(df, required_cols, EXCEL_PATH)
    df = df.dropna(subset=required_cols)
    df["Completed Date"] = pd.to_datetime(df["Completed Date"], errors="coerce")
    df = df.dropna(subset=["Completed Date"])
    df["Month"] = df["Completed Date"].dt.to_period("M").astype(str)
    df["Is Fail"] = df["Closure Code 1"].str.lower().str.contains("fail|failed|failure", na=False)

    frat_tab_html = generate_frat_tab(frat_df)

    html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Closure Code Dashboard</title>
  <script src="plotly-latest.min.js"></script>
  <style>
    * {{ box-sizing: border-box; }}
    body {{
      font-family: 'Inter', sans-serif;
      margin: 0;
      background-color: #f4f6f9;
      color: #333;
      display: flex;
    }}
    .sidebar {{
      width: 220px;
      background: #2f3542;
      color: #fff;
      height: 100vh;
      padding-top: 30px;
      position: fixed;
      left: 0;
      top: 0;
      display: flex;
      flex-direction: column;
    }}
    .sidebar h2 {{ text-align: center; font-size: 20px; margin-bottom: 30px; }}
    .sidebar button {{
      padding: 15px 20px;
      background: none;
      border: none;
      text-align: left;
      color: white;
      font-weight: 500;
      font-size: 15px;
      width: 100%;
      transition: background 0.2s ease;
      cursor: pointer;
    }}
    .sidebar button:hover {{ background: #57606f; }}
    .sidebar button.active {{ background: #1e90ff; }}
    .main-content {{
      margin-left: 220px;
      padding: 30px;
      flex: 1;
    }}
    .main-tab {{
      display: none;
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.06);
      margin-bottom: 40px;
    }}
    .tab-buttons-wrapper {{
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 20px;
    }}
    .tablink {{
      padding: 10px 18px;
      border: none;
      font-weight: bold;
      background: #f1f1f1;
      border-radius: 8px;
      cursor: pointer;
      transition: background 0.3s ease;
    }}
    .tablink:hover {{ background: #ddd; }}
    .tablink.active {{ background: #38ef7d; color: white; }}
    .tabcontent {{ display: none; }}

    @media (max-width: 768px) {{
      .sidebar {{
        width: 100%;
        height: auto;
        flex-direction: row;
        justify-content: space-around;
        position: relative;
      }}
      .main-content {{
        margin-left: 0;
        padding: 20px;
      }}
    }}
  </style>
  <script>
    function switchMainTab(evt, tabId) {{
      var tabs = document.querySelectorAll('.main-tab');
      tabs.forEach(tab => tab.style.display = 'none');
      document.getElementById(tabId).style.display = 'block';

      var buttons = document.querySelectorAll('.sidebar button');
      buttons.forEach(btn => btn.classList.remove('active'));
      evt.currentTarget.classList.add('active');

      window.dispatchEvent(new Event('resize'));
    }}

    function openTab(evt, tabId) {{
      var tabs = document.querySelectorAll('.tabcontent');
      tabs.forEach(tab => tab.style.display = 'none');

      var buttons = document.querySelectorAll('.tablink');
      buttons.forEach(btn => btn.classList.remove('active'));

      document.getElementById(tabId).style.display = 'block';
      evt.currentTarget.classList.add('active');

      window.dispatchEvent(new Event('resize'));
    }}

    window.onload = function () {{
      document.getElementById('globalTab').style.display = 'block';
      document.querySelector('.sidebar button').classList.add('active');
    }};
  </script>
</head>
<body>
  <div class="sidebar">
    <h2>Dashboard</h2>
    <button onclick="switchMainTab(event, 'globalTab')">Global</button>
    <button onclick="switchMainTab(event, 'individualTab')">Individual</button>
    <button onclick="switchMainTab(event, 'schedulingTab')">Scheduling</button>
    <button onclick="switchMainTab(event, 'lecTab')">LEC</button>
    <button onclick="switchMainTab(event, 'failureTab')">Failure Analysis</button>
    <button onclick="switchMainTab(event, 'fratTab')">FRAT</button>
  </div>

  <div class="main-content">
    <h1>Closure Code Dashboard</h1>
    {generate_global_tab(df)}
    {generate_individual_tab(df)}
    {generate_scheduling_tab()}
    {generate_lec_tab(df)}
    {generate_failure_analysis_tab(df)}
    {frat_tab_html}
  </div>
</body>
</html>
"""
    with open(EXPORT_HTML, "w", encoding="utf-8") as f:
        f.write(html)

if __name__ == "__main__":
    main()
