import win32com.client
from datetime import datetime
import pandas as pd

# === Configuration ===
START_DATE = datetime(2024, 1, 1)
EXPORT_PATH = "outlook_appointments_2024.xlsx"

def get_all_appointments(folder, start_date, results):
    try:
        items = folder.Items
        items.IncludeRecurrences = True
        items.Sort("[Start]")

        restriction = f"[Start] >= '{start_date.strftime('%m/%d/%Y %H:%M %p')}'"
        restricted_items = items.Restrict(restriction)

        for appt in restricted_items:
            try:
                results.append({
                    "Mailbox": folder.Parent.Name,
                    "Folder": folder.Name,
                    "Subject": appt.Subject,
                    "Start": appt.Start,
                    "End": appt.End,
                    "Location": appt.Location,
                    "Organizer": appt.Organizer if hasattr(appt, 'Organizer') else '',
                })
            except Exception as e:
                print(f"Error reading appointment: {e}")

        # Recurse into subfolders
        for subfolder in folder.Folders:
            get_all_appointments(subfolder, start_date, results)

    except Exception as e:
        print(f"Error accessing folder '{folder.Name}': {e}")

def pull_outlook_appointments(start_date):
    outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
    all_appointments = []

    for i in range(outlook.Folders.Count):
        try:
            mailbox = outlook.Folders.Item(i + 1)
            calendar_folder = mailbox.Folders["Calendar"]
            print(f"Scanning: {mailbox.Name} -> Calendar")
            get_all_appointments(calendar_folder, start_date, all_appointments)
        except Exception as e:
            print(f"Skipping {mailbox.Name}: {e}")

    return all_appointments

if __name__ == "__main__":
    appointments = pull_outlook_appointments(START_DATE)
    if appointments:
        df = pd.DataFrame(appointments)
        df.to_excel(EXPORT_PATH, index=False)
        print(f"\nExported {len(appointments)} appointments to {EXPORT_PATH}")
    else:
        print("No appointments found.")
