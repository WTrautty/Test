
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import calendar
import os
from datetime import datetime

# === Configuration ===
EXCEL_PATH = r"C:\Users\AD39644\Downloads\data (5).xlsx"
EXPORT_HTML = r"C:\Users\AD39644\OneDrive - Lumen\Federal Service Delivery - Scripting Archive\Dashboards.html"
TAB_MIN_ENTRIES = 100
TOP_PERFORMER = "Davis, Walter (Walter)"
TOP_LABEL = "Top Performer"
ADDITIONAL_EXCEL = r"C:\Users\AD39644\Desktop\EIS\OneDrive_2024-07-25\Auditing Script\Outlook_Calendars.xlsx"


def validate_columns(df, required_cols, file_name):
    missing = [col for col in required_cols if col not in df.columns]
    if missing:
        raise ValueError(f"Missing columns {missing} in {file_name}")

def generate_global_tab(df):
    # Sort the dataframe by Month first to ensure chronological order
    df = df.copy()
    df['Month'] = pd.to_datetime(df['Month'].astype(str)).dt.to_period('M')
    df = df.sort_values('Month')
    df['Month'] = df['Month'].astype(str)

    # For pie chart, handle NaN values and rename columns correctly
    pie_df = (
        df["Closure Code 1"]
        .fillna("Unknown")
        .value_counts(normalize=True)
        .mul(100)
        .reset_index()
    )
    pie_df.columns = ["proportion", "Percentage"]  # Changed column names to match what plotly expects
    pie = px.pie(pie_df, names="proportion", values="Percentage", title="Global Closure Code Distribution")
    pie.update_layout(height=300)
    pie_html = pie.to_html(full_html=False, include_plotlyjs=True)

    closed = df.groupby("Month").size().reset_index(name="Closed Orders")
    closed_line = px.line(closed, x="Month", y="Closed Orders", title="Global Closed Orders Per Month")
    closed_line.update_layout(height=300)
    closed_html = closed_line.to_html(full_html=False, include_plotlyjs=False)

    fail = df.groupby("Month")["Is Fail"].mean().mul(100).reset_index(name="Fail %")
    fail_line = px.line(fail, x="Month", y="Fail %", title="Global Failure Rate per Month")
    fail_line.update_layout(yaxis=dict(range=[0, 100]), height=300)
    fail_html = fail_line.to_html(full_html=False, include_plotlyjs=False)

    return f"""
    <div id="globalTab" class="main-tab">
      <h2>Global Statistics</h2>
      <hr>{fail_html}
      <hr>{pie_html}
      <hr>{closed_html}
    </div>
    """

def generate_individual_tab(df):
    owner_counts = df["Task Owner"].value_counts()
    valid = owner_counts[owner_counts >= TAB_MIN_ENTRIES].index.tolist()
    if not valid:
        return "<div id='individualTab' class='main-tab'><h2>No Individual Reports Available</h2></div>"

    top_df = df[df["Task Owner"] == TOP_PERFORMER].copy()
    top_df["Is Fail"] = top_df["Closure Code 1"].str.lower().str.contains("fail|failed|failure", na=False)

    global_avg = df.groupby("Month").size().reset_index(name="Average")
    top_monthly = top_df.groupby("Month").size().reset_index(name="Completed")
    tfail = top_df.groupby("Month")["Is Fail"].mean().mul(100).reset_index(name="Top Fail %")

    buttons = []
    contents = []
    for i, owner in enumerate(valid):
        div_id = f"tab{i}"
        badge = " 🏆" if owner == TOP_PERFORMER else ""
        owner_df = df[df["Task Owner"] == owner].copy()
        owner_df["Is Fail"] = owner_df["Closure Code 1"].str.lower().str.contains("fail|failed|failure", na=False)

        op = owner_df["Closure Code 1"].value_counts(normalize=True).mul(100)
        tp = top_df["Closure Code 1"].value_counts(normalize=True).mul(100)
        codes = sorted(set(op.index).union(tp.index))
        op = op.reindex(codes, fill_value=0)
        tp = tp.reindex(codes, fill_value=0)
        pie_df = pd.DataFrame({"Closure Code 1": codes, "Owner %": op.values})
        pie = px.pie(pie_df, names="Closure Code 1", values="Owner %", title=f"{owner}'s Closure Code Distribution")
        pie.update_layout(height=300)
        pie_html = pie.to_html(full_html=False, include_plotlyjs=(i == 0))

        diff = (op - tp).reset_index()
        diff.columns = ["Closure Code 1", "Delta"]
        diff = diff.sort_values("Delta")
        colors = [
            ("green" if d >= 0 else "crimson") if "successful" in c.lower()
            else ("green" if d < 0 else "crimson") if "fail" in c.lower()
            else "blue"
            for c, d in zip(diff["Closure Code 1"], diff["Delta"])
        ]
        bar = go.Figure(
            go.Bar(y=diff["Closure Code 1"], x=diff["Delta"], orientation="h", marker_color=colors)
        )
        bar.update_layout(
            title=f"{owner} vs {TOP_LABEL} – Closure Code Δ", xaxis=dict(range=[-20, 20]), height=300
        )
        bar_html = bar.to_html(full_html=False, include_plotlyjs=False)

        own_monthly = owner_df.groupby("Month").size().reset_index(name="Completed")
        line = go.Figure()
        line.add_trace(go.Scatter(x=own_monthly["Month"], y=own_monthly["Completed"], name=owner))
        line.add_trace(
            go.Scatter(
                x=top_monthly["Month"],
                y=top_monthly["Completed"],
                name=TOP_LABEL,
                line=dict(dash="dash"),
            )
        )
        line.add_trace(
            go.Scatter(
                x=global_avg["Month"],
                y=global_avg["Average"],
                name="Global Avg",
                line=dict(dash="dot"),
            )
        )
        line.update_layout(title=f"{owner} – Monthly Completed Tasks", height=300)
        line_html = line.to_html(full_html=False, include_plotlyjs=False)

        ofail = owner_df.groupby("Month")["Is Fail"].mean().mul(100).reset_index(name="Fail %")
        gfail = df.groupby("Month")["Is Fail"].mean().mul(100).reset_index(name="Global Fail %")
        ff = ofail.merge(tfail, on="Month", how="outer").merge(gfail, on="Month", how="outer")
        fail_fig = go.Figure()
        fail_fig.add_trace(go.Scatter(x=ff["Month"], y=ff["Fail %"], name=owner))
        fail_fig.add_trace(
            go.Scatter(x=ff["Month"], y=ff["Top Fail %"], name=TOP_LABEL, line=dict(dash="dash"))
        )
        fail_fig.add_trace(
            go.Scatter(x=ff["Month"], y=ff["Global Fail %"], name="Global Avg", line=dict(dash="dot"))
        )
        fail_fig.update_layout(title=f"{owner} – % Fail Rate", yaxis=dict(range=[0, 100]), height=300)
        fail_html = fail_fig.to_html(full_html=False, include_plotlyjs=False)

        buttons.append(
            f'<button class="tablink" onclick="openTab(event, \'{div_id}\')">{owner}{badge}</button>'
        )
        contents.append(
            f"""
            <div id="{div_id}" class="tabcontent" style="display:{'block' if i == 0 else 'none'};">
              {pie_html}
              <hr>{bar_html}
              <hr>{line_html}
              <hr>{fail_html}
            </div>
            """
        )

    return f"""
    <div id="individualTab" class="main-tab">
      <h2>Individual Reports</h2>
      <div class="tab-buttons-wrapper">{''.join(buttons)}</div>
      {''.join(contents)}
    </div>
    """

def generate_scheduling_tab():
    try:
        xls = pd.read_excel(ADDITIONAL_EXCEL, sheet_name=None, engine="openpyxl")
    except Exception:
        return "<div id='schedulingTab' class='main-tab'><h2>Error Loading Scheduling Data</h2></div>"

    records = []
    for name, sheet in xls.items():
        if "End" not in sheet.columns:
            continue
        try:
            validate_columns(sheet, ["End"], f"Sheet {name}")
        except ValueError:
            continue
        s = sheet.dropna(subset=["End"]).copy()
        s["End"] = pd.to_datetime(s["End"], errors="coerce")
        s = s.dropna(subset=["End"])
        s["Month"] = s["End"].dt.to_period("M").astype(str)
        counts = s.groupby("Month").size().reset_index(name="Count")
        counts["Tab"] = name
        records.append(counts)

    if not records:
        return "<div id='schedulingTab' class='main-tab'><h2>No Scheduling Data Available</h2></div>"

    sched = pd.concat(records, ignore_index=True)
    avg_tab_fig = px.bar(
        sched.groupby("Tab")["Count"].mean().reset_index(),
        x="Tab",
        y="Count",
        title="Avg Rows per Tab per Month",
    )
    avg_tab_fig.update_layout(height=300)

    total_monthly_fig = px.line(
        sched.groupby("Month")["Count"].sum().reset_index(name="Total Rows"),
        x="Month",
        y="Total Rows",
        title="Total Rows Across All Tabs",
    )
    total_monthly_fig.update_layout(height=300)

    workday_data = []
    for month_str, grp in sched.groupby("Month"):
        total = grp["Count"].sum()
        try:
            year, mon = map(int, month_str.split("-"))
            days_in_month = calendar.monthrange(year, mon)[1]
            workdays = len(pd.date_range(f"{year}-{mon:02d}-01", periods=days_in_month, freq="B"))
            workday_data.append({"Month": month_str, "Avg Per Workday": total / workdays})
        except ValueError:
            continue

    workday_df = pd.DataFrame(workday_data)
    workday_fig = px.bar(
        workday_df, x="Month", y="Avg Per Workday", title="Average Rows per Workday"
    )
    workday_fig.update_layout(height=300)

    return f"""
    <div id="schedulingTab" class="main-tab">
      <h2>Scheduling Dashboard</h2>
      <hr>{avg_tab_fig.to_html(full_html=False, include_plotlyjs=True)}
      <hr>{total_monthly_fig.to_html(full_html=False, include_plotlyjs=False)}
      <hr>{workday_fig.to_html(full_html=False, include_plotlyjs=False)}
    </div>
    """

def main():
    try:
        df = pd.read_excel(EXCEL_PATH, engine="openpyxl")
    except Exception:
        raise

    required_cols = ["Task Owner", "Closure Code 1", "Completed Date"]
    validate_columns(df, required_cols, EXCEL_PATH)
    df = df[required_cols].dropna()
    df["Completed Date"] = pd.to_datetime(df["Completed Date"], errors="coerce")
    df = df.dropna(subset=["Completed Date"])
    df["Month"] = df["Completed Date"].dt.to_period("M")
    df = df.sort_values("Month")
    df["Month"] = df["Month"].astype(str)
    df["Is Fail"] = df["Closure Code 1"].str.lower().str.contains("fail|failed|failure", na=False)

    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
      <title>Closure Code Dashboard</title>
      <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
      <script>
        function switchMainTab(evt, tabId) {{
          var tabs = document.querySelectorAll('.main-tab');
          tabs.forEach(function(tab) {{
            tab.style.display = 'none';
          }});
          var buttons = document.querySelectorAll('.maintablink');
          buttons.forEach(function(button) {{
            button.classList.remove('active');
          }});
          document.getElementById(tabId).style.display = 'block';
          evt.currentTarget.classList.add('active');
          window.dispatchEvent(new Event('resize'));
        }}

        function openTab(evt, tabId) {{
          var tabs = document.querySelectorAll('.tabcontent');
          tabs.forEach(function(tab) {{
            tab.style.display = 'none';
          }});
          var buttons = document.querySelectorAll('.tablink');
          buttons.forEach(function(button) {{
            button.classList.remove('active');
          }});
          document.getElementById(tabId).style.display = 'block';
          evt.currentTarget.classList.add('active');
          window.dispatchEvent(new Event('resize'));
        }}

        // Set initial active tab
        window.onload = function() {{
          document.getElementById('globalTab').style.display = 'block';
          document.querySelector('.maintablink').classList.add('active');
        }};
      </script>
      <style>
        body {{ 
          font-family: Arial, sans-serif; 
          background: #f9f9f9; 
          margin: 0; 
          padding: 20px; 
        }}
        .maintablink, .tablink {{ 
          margin: 4px; 
          padding: 8px 16px; 
          cursor: pointer; 
          border: none;
          background: #f1f1f1;
          border-radius: 4px; 
        }}
        .maintablink:hover, .tablink:hover {{
          background: #ddd;
        }}
        .active {{ 
          background: #4CAF50 !important;
          color: white;
        }}
        .main-tab {{ 
          display: none; 
          padding: 20px; 
          background: #fff; 
          border-radius: 8px; 
          box-shadow: 0 2px 4px rgba(0,0,0,0.1); 
          margin-top: 20px;
        }}
        .tabcontent {{ 
          display: none; 
          margin-top: 20px; 
        }}
        hr {{ 
          border: 0; 
          height: 1px; 
          background: #ddd; 
          margin: 20px 0; 
        }}
        .tab-buttons-wrapper {{ 
          display: flex; 
          flex-wrap: wrap; 
          gap: 8px;
          margin-bottom: 20px;
        }}
        h1 {{
          color: #333;
          margin-bottom: 30px;
        }}
        h2 {{
          color: #444;
          margin-top: 0;
        }}
        @media (max-width: 600px) {{
          .main-tab {{ 
            padding: 10px; 
          }}
          .maintablink, .tablink {{ 
            padding: 6px 12px; 
            font-size: 14px; 
          }}
        }}
      </style>
    </head>
    <body>
      <h1>Closure Code Dashboard</h1>
      <div>
        <button class="maintablink" onclick="switchMainTab(event, 'globalTab')">Global</button>
        <button class="maintablink" onclick="switchMainTab(event, 'individualTab')">Individual</button>
        <button class="maintablink" onclick="switchMainTab(event, 'schedulingTab')">Scheduling</button>
      </div>
      {generate_global_tab(df)}
      {generate_individual_tab(df)}
      {generate_scheduling_tab()}
    </body>
    </html>
    """

    with open(EXPORT_HTML, "w", encoding="utf-8") as f:
        f.write(html)

if __name__ == "__main__":
    main()
