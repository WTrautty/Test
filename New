def generate_scheduling_tab_with_dropdown():
    import pandas as pd
    import plotly.graph_objects as go
    import plotly.express as px

    try:
        xls = pd.read_excel(ADDITIONAL_EXCEL, sheet_name=None, engine="openpyxl")
    except Exception:
        return "<div id='schedulingTab' class='main-tab'><h2>Error Loading Scheduling Data</h2></div>"

    records = []
    for name, sheet in xls.items():
        if "End" not in sheet.columns:
            continue
        try:
            validate_columns(sheet, ["End"], f"Sheet {name}")
        except ValueError:
            continue
        s = sheet.dropna(subset=["End"]).copy()
        s["End"] = pd.to_datetime(s["End"], errors="coerce")
        s = s.dropna(subset=["End"])
        s["Month"] = s["End"].dt.to_period("M").astype(str)
        counts = s.groupby("Month").size().reset_index(name="Count")
        counts["Tab"] = name
        records.append(counts)

    if not records:
        return "<div id='schedulingTab' class='main-tab'><h2>No Scheduling Data Available</h2></div>"

    sched = pd.concat(records, ignore_index=True)
    sched = sched[sched["Tab"] != "XYZXYZ"]

    months = sorted(sched["Month"].unique())
    summary = {}
    for schedulers in [1, 2, 3, 4, 5]:
        rows = []
        vac_days = 36 * schedulers
        vac_per_month = vac_days / schedulers / len(months)
        for month in months:
            month_df = sched[sched["Month"] == month]
            total = month_df["Count"].sum()
            year, mon = map(int, month.split("-"))
            start = pd.Timestamp(f"{year}-{mon:02d}-01")
            end = start + pd.offsets.MonthEnd(1)
            workdays = pd.date_range(start=start, end=end, freq="B").size
            adj_days = max(workdays - vac_per_month, 1)
            rows.append(total / (adj_days * schedulers))
        summary[schedulers] = rows

    traces = []
    visibility = []
    for schedulers, values in summary.items():
        visible = [False] * len(summary)
        visible[schedulers - 1] = True
        trace = go.Bar(x=months, y=values, name=f"{schedulers} Schedulers", visible=(schedulers == 2))
        traces.append(trace)
        visibility.append(visible)

    fig = go.Figure(data=traces)
    fig.update_layout(
        title="Adjusted Avg Rows per Scheduler per Workday (With Vacation)",
        height=600,
        updatemenus=[{
            "buttons": [
                {
                    "label": f"{n} Scheduler{'s' if n > 1 else ''}",
                    "method": "update",
                    "args": [
                        {"visible": vis},
                        {"title": f"Adjusted Avg Rows per Scheduler per Workday â€“ {n} Scheduler{'s' if n > 1 else ''}"}
                    ]
                } for n, vis in zip(summary.keys(), visibility)
            ],
            "direction": "down",
            "showactive": True,
            "x": 1,
            "xanchor": "right",
            "y": 1.1,
            "yanchor": "top"
        }]
    )

    return f"""
    <div id="schedulingTab" class="main-tab">
      <h2>Scheduling Dashboard</h2>
      <hr>{fig.to_html(full_html=False, include_plotlyjs=True)}
    </div>
    """
