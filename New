import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from pandas.tseries.offsets import MonthEnd

# === File Paths ===
EXCEL_PATH = r"C:\Path\To\MainDashboard.xlsx"
ADDITIONAL_EXCEL = r"C:\Path\To\MultiTabWorkbook.xlsx"
EXPORT_HTML = r"C:\Path\To\Output\Dashboard.html"
TAB_MIN_ENTRIES = 100
top_performer_name = "Davis, Walter (Walter)"
top_label = "Top Performer"

# === Load and preprocess main data ===
df = pd.read_excel(EXCEL_PATH, engine='openpyxl')
df = df[['Task Owner', 'Closure Code 1', 'Completed Date']].dropna()
df['Completed Date'] = pd.to_datetime(df['Completed Date'], errors='coerce')
df = df.dropna(subset=['Completed Date'])
df['Month'] = df['Completed Date'].dt.to_period('M').astype(str)

owner_counts = df['Task Owner'].value_counts()
valid_owners = owner_counts[owner_counts >= TAB_MIN_ENTRIES].index.tolist()

monthly_totals = df.groupby(['Month', 'Task Owner']).size().reset_index(name='Count')
global_avg = monthly_totals.groupby('Month')['Count'].mean().reset_index(name='Average')

tab_buttons = []
tab_contents = []

# === Global Pie Chart (Closure Codes) ===
global_pie = df['Closure Code 1'].value_counts(normalize=True) * 100
global_pie_df = global_pie.reset_index()
global_pie_df.columns = ['Closure Code', 'Percentage']
closure_pie_fig = px.pie(global_pie_df, names='Closure Code', values='Percentage',
                         title="Global Closure Code Distribution")
closure_pie_fig.update_layout(height=400)
closure_pie_html = closure_pie_fig.to_html(full_html=False, include_plotlyjs=False)

# === Global Completed Line Chart ===
closed_monthly = df.groupby('Month').size().reset_index(name='Closed Orders')
closed_line_fig = px.line(closed_monthly, x='Month', y='Closed Orders', title="Global Closed Orders Per Month")
closed_line_html = closed_line_fig.to_html(full_html=False, include_plotlyjs=False)

# === Global Fail Line Chart ===
df['Is Fail'] = df['Closure Code 1'].str.lower().str.contains('fail')
fail_rate = df.groupby('Month')['Is Fail'].mean().reset_index()
fail_rate['Fail %'] = fail_rate['Is Fail'] * 100
fail_line_fig = px.line(fail_rate, x='Month', y='Fail %', title='Global Failure Rate per Month')
fail_line_fig.update_layout(yaxis=dict(range=[0, 100]))
fail_line_html = fail_line_fig.to_html(full_html=False, include_plotlyjs=True)

# === Individual Owner Tabs ===
for i, owner in enumerate(valid_owners):
    div_id = f"tab{i}"
    owner_data = df[df['Task Owner'] == owner].copy()
    top_data = df[df['Task Owner'] == top_performer_name].copy()

    # === PIE CHART ===
    owner_pie = owner_data['Closure Code 1'].value_counts(normalize=True) * 100
    top_pie = top_data['Closure Code 1'].value_counts(normalize=True) * 100
    all_codes = sorted(set(owner_pie.index).union(set(top_pie.index)))
    owner_pie = owner_pie.reindex(all_codes, fill_value=0)
    top_pie = top_pie.reindex(all_codes, fill_value=0)

    pie_df = owner_pie.reset_index()
    pie_df.columns = ['Closure Code', 'Owner %']
    pie_fig = px.pie(pie_df, names='Closure Code', values='Owner %',
                     title=f"{owner}'s Closure Code Distribution")
    pie_fig.update_layout(height=400)

    # === DIVERGING BAR ===
    delta_df = pd.DataFrame({
        'Closure Code': all_codes,
        'Owner %': owner_pie.values,
        'Top %': top_pie.values
    })
    delta_df['Delta'] = delta_df['Owner %'] - delta_df['Top %']
    delta_df.sort_values('Delta', inplace=True)

    marker_colors = []
    for code, delta in zip(delta_df['Closure Code'], delta_df['Delta']):
        code_lower = str(code).lower()
        if 'successful' in code_lower:
            marker_colors.append('green' if delta >= 0 else 'crimson')
        elif 'fail' in code_lower:
            marker_colors.append('green' if delta < 0 else 'crimson')
        else:
            marker_colors.append('blue')

    delta_fig = go.Figure()
    delta_fig.add_trace(go.Bar(
        y=delta_df['Closure Code'],
        x=delta_df['Delta'],
        orientation='h',
        marker_color=marker_colors
    ))
    delta_fig.update_layout(
        title=f"{owner} vs {top_label} ‚Äì Closure Code Usage Difference",
        xaxis=dict(title='Percentage Difference (%)', range=[-20, 20]),
        height=450,
        showlegend=False
    )
    delta_html = delta_fig.to_html(full_html=False, include_plotlyjs=(i == 0))

    # === TEXT INSIGHT ===
    insight_html = "<div><h3>Closure Code Insights</h3><ul style='padding-left:20px;'>"
    for _, row in delta_df.iterrows():
        code = str(row['Closure Code'])
        delta = row['Delta']
        direction = 'more' if delta > 0 else 'less'
        color = 'green' if ('successful' in code.lower() and delta > 0) or ('fail' in code.lower() and delta < 0) else 'crimson' if ('successful' in code.lower() or 'fail' in code.lower()) else 'blue'
        insight_html += f"<li style='color:{color}; margin-bottom:6px;'>You use <b>{code}</b> {abs(delta):.1f}% {direction} than the {top_label}.</li>"
    insight_html += "</ul></div>"

    delta_section_html = f"""
    <div style="display:flex; flex-wrap:wrap; gap:40px;">
        <div style="flex:1 1 50%;">{delta_html}</div>
        <div style="flex:1 1 45%;">{insight_html}</div>
    </div>
    """

    # === COMPLETED TASKS LINE CHART ===
    owner_monthly = owner_data.groupby('Month').size().reset_index(name='Completed')
    top_monthly = top_data.groupby('Month').size().reset_index(name='Completed')

    line_fig = go.Figure()
    line_fig.add_trace(go.Scatter(x=owner_monthly['Month'], y=owner_monthly['Completed'], name=owner))
    line_fig.add_trace(go.Scatter(x=top_monthly['Month'], y=top_monthly['Completed'], name=top_label, line=dict(dash='dash')))
    line_fig.add_trace(go.Scatter(x=global_avg['Month'], y=global_avg['Average'], name='Global Avg', line=dict(dash='dot')))
    line_fig.update_layout(title=f"{owner} ‚Äì Monthly Completed Tasks", height=400)

    line_html = line_fig.to_html(full_html=False, include_plotlyjs=False)

    # === FAIL RATE LINE CHART ===
    owner_data['Is Fail'] = owner_data['Closure Code 1'].str.lower().str.contains('fail')
    top_data['Is Fail'] = top_data['Closure Code 1'].str.lower().str.contains('fail')
    owner_fail = owner_data.groupby('Month')['Is Fail'].mean().reset_index(name='Fail %')
    top_fail = top_data.groupby('Month')['Is Fail'].mean().reset_index(name='Top Performer Fail %')
    global_fail = df.groupby(['Month', 'Task Owner'])['Is Fail'].mean().reset_index()
    global_avg_fail = global_fail.groupby('Month')['Is Fail'].mean().reset_index(name='Global Avg Fail %')

    fail_merged = owner_fail.merge(top_fail, on='Month', how='outer').merge(global_avg_fail, on='Month', how='outer')
    fail_merged[['Fail %', 'Top Performer Fail %', 'Global Avg Fail %']] *= 100

    fail_fig = go.Figure()
    fail_fig.add_trace(go.Scatter(x=fail_merged['Month'], y=fail_merged['Fail %'], name=owner))
    fail_fig.add_trace(go.Scatter(x=fail_merged['Month'], y=fail_merged['Top Performer Fail %'], name=top_label, line=dict(dash='dash')))
    fail_fig.add_trace(go.Scatter(x=fail_merged['Month'], y=fail_merged['Global Avg Fail %'], name='Global Avg', line=dict(dash='dot')))
    fail_fig.update_layout(title=f"{owner} ‚Äì % Fail Rate Comparison", yaxis=dict(range=[0, 100]), height=400)

    fail_html = fail_fig.to_html(full_html=False, include_plotlyjs=False)

    badge = " üèÜ" if owner == top_performer_name else ""
    tab_buttons.append(f'<button class="tablink" onclick="openTab(event, \'{div_id}\')">{owner}{badge}</button>')
    tab_contents.append(f"""
    <div id="{div_id}" class="tabcontent" style="display:{'block' if i == 0 else 'none'};">
        {pie_fig.to_html(full_html=False, include_plotlyjs=(i == 0))}
        <hr>{delta_section_html}
        <hr>{line_html}
        <hr>{fail_html}
    </div>
    """)

# === SCHEDULING TAB DATA ===
xls = pd.read_excel(ADDITIONAL_EXCEL, sheet_name=None, engine='openpyxl')
monthly_rows_per_tab = []
for sheet, data in xls.items():
    if "End" in data.columns:
        data = data.dropna(subset=['End']).copy()
        data['End'] = pd.to_datetime(data['End'], errors='coerce')
        data = data.dropna(subset=['End'])
        data['Month'] = data['End'].dt.to_period("M").astype(str)
        grouped = data.groupby('Month').size().reset_index(name='Count')
        grouped['Tab'] = sheet
        monthly_rows_per_tab.append(grouped)

sched_df = pd.concat(monthly_rows_per_tab)

avg_tab_fig = px.bar(sched_df.groupby('Tab')['Count'].mean().reset_index(),
                     x='Tab', y='Count', title="Average Rows per Tab per Month")
total_monthly_fig = px.line(sched_df.groupby('Month')['Count'].sum().reset_index(name='Total Rows'),
                            x='Month', y='Total Rows', title="Total Rows Across All Tabs")

# Workday average
workday_data = []
for month, group in sched_df.groupby('Month'):
    total = group['Count'].sum()
    y, m = map(int, month.split('-'))
    start = pd.Timestamp(y, m, 1)
    end = start + MonthEnd(0)
    weekdays = pd.date_range(start, end, freq='B')
    workday_data.append({'Month': month, 'Avg Per Workday': total / len(weekdays)})

workday_df = pd.DataFrame(workday_data)
workday_fig = px.bar(workday_df, x='Month', y='Avg Per Workday', title="Average Rows per Workday")

scheduling_tab_html = f"""
<div class="tabcontent" style="display:block">
    <h2>Scheduling Dashboard</h2>
    <hr>{avg_tab_fig.to_html(full_html=False, include_plotlyjs=True)}
    <hr>{total_monthly_fig.to_html(full_html=False, include_plotlyjs=False)}
    <hr>{workday_fig.to_html(full_html=False, include_plotlyjs=False)}
</div>
"""

# === HTML OUTPUT ===
html_output = f"""
<html>
<head>
    <title>Closure Code Dashboard</title>
    <script>
    function switchMainTab(evt, tabName) {{
        let tabs = document.getElementsByClassName('main-tab');
        for (let t of tabs) t.style.display = 'none';
        for (let b of document.getElementsByClassName('maintablink')) b.classList.remove('active');
        document.getElementById(tabName).style.display = 'block';
        evt.currentTarget.classList.add('active');
    }}
    function openTab(evt, tabName) {{
        let tabs = document.getElementsByClassName('tabcontent');
        for (let t of tabs) t.style.display = 'none';
        for (let b of document.getElementsByClassName('tablink')) b.classList.remove('active');
        document.getElementById(tabName).style.display = 'block';
        evt.currentTarget.classList.add('active');
        setTimeout(() => window.dispatchEvent(new Event('resize')), 200);
    }}
    </script>
    <style>
        body {{ font-family: sans-serif; background: #f9f9f9; margin: 0; padding: 0; }}
        .maintablink, .tablink {{
            background-color: #ddd; border: none; padding: 10px 20px; margin: 5px; font-size: 16px;
        }}
        .maintablink.active, .tablink.active {{ background-color: #bbb; }}
        .tabcontent {{ display: none; max-width: 1400px; margin: 20px auto; background: white; padding: 20px; border-radius: 8px; }}
        .main-tab-buttons, .tab-buttons-wrapper {{ text-align: center; }}
    </style>
</head>
<body>
    <h1>Closure Code Dashboard</h1>
    <div class="main-tab-buttons">
        <button class="maintablink active" onclick="switchMainTab(event, 'globalTab')">Global Statistics</button>
        <button class="maintablink" onclick="switchMainTab(event, 'individualTab')">Individual Reports</button>
        <button class="maintablink" onclick="switchMainTab(event, 'schedulingTab')">Scheduling</button>
    </div>
    <div id="globalTab" class="main-tab" style="display:block">
        <div class="tabcontent">
            <hr>{fail_line_html}
            <hr>{closure_pie_html}
            <hr>{closed_line_html}
        </div>
    </div>
    <div id="individualTab" class="main-tab" style="display:none">
        <div class="tab-buttons-wrapper">{''.join(tab_buttons)}</div>
        {''.join(tab_contents)}
    </div>
    <div id="schedulingTab" class="main-tab" style="display:none">
        {scheduling_tab_html}
    </div>
</body>
</html>
"""

with open(EXPORT_HTML, 'w', encoding='utf-8') as f:
    f.write(html_output)

print(f"‚úÖ Dashboard created at: {EXPORT_HTML}")
