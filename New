def generate_barry_mac_pie_tab():
    print("[DEBUG] Starting generate_barry_mac_pie_tab")

    try:
        df = pd.read_excel(EXCEL_PATH, sheet_name="Sheet2", engine="openpyxl")
        print("[DEBUG] Loaded Sheet2 successfully")
    except Exception as e:
        print(f"[ERROR] Failed to load Sheet2: {e}")
        return f"<p><strong>Failed to load Sheet2:</strong> {e}</p>"

    required_cols = ["Task Owner", "Task Name", "Completed Date"]
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        print(f"[ERROR] Missing columns: {missing_cols}")
        return f"<p><strong>Missing columns in Sheet2: {missing_cols}</strong></p>"

    print("[DEBUG] Converting 'Completed Date' to datetime")
    df["Completed Date"] = pd.to_datetime(df["Completed Date"], errors="coerce")

    print("[DEBUG] Filtering Task Name == 'MACD' and Completed Date >= 2024-10-10")
    filtered_df = df[
        (df["Task Name"].str.upper() == "MACD") &
        (df["Completed Date"] >= datetime(2024, 10, 10))
    ]

    print(f"[DEBUG] Rows after filtering: {len(filtered_df)}")
    if len(filtered_df) > 0:
        print("[DEBUG] Sample of filtered Task Owner values:")
        print(filtered_df["Task Owner"].value_counts().head())
    else:
        print("[WARN] No data found after filtering.")

    task_owner_counts = filtered_df["Task Owner"].dropna().value_counts()
    print(f"[DEBUG] Unique Task Owners in filtered data: {len(task_owner_counts)}")

    if task_owner_counts.empty:
        return "<p><strong>No matching data for Task Name 'MACD' past 10/10/2024.</strong></p>"

    fig = go.Figure(data=[
        go.Pie(labels=task_owner_counts.index, values=task_owner_counts.values, hole=0.4)
    ])
    fig.update_layout(title="Task Owner Distribution for MACD Tasks (after 10/10/2024)")

    print("[DEBUG] Pie chart successfully generated")

    return fig.to_html(full_html=False, include_plotlyjs=False)
