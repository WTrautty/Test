# (Insert all previous import statements, config, and helper functions here â€” unchanged)

# ---------------- Main Execution ----------------

try:
    wb_main = openpyxl.load_workbook(EXCEL_FILE, read_only=True)
except FileNotFoundError:
    print(f"Main file not found: {EXCEL_FILE}")
    exit()

all_orders = get_all_orders()
wb_main.close()

user_order_number = input("Enter the order number (Ops Console Ticket) to process: ").strip()
target_order = next((o for o in all_orders if str(o["Data"].get("Ops Console Ticket", "")).strip() == user_order_number), None)

if not target_order:
    print(f"Order number '{user_order_number}' not found.")
    exit()

try:
    wb_laser = openpyxl.load_workbook(LASER_FILE, read_only=True)
except FileNotFoundError:
    print(f"LASER file not found: {LASER_FILE}")
    exit()

if os.path.exists(SCHEDULER_EXCEL):
    try:
        df_sched = pd.read_excel(SCHEDULER_EXCEL, sheet_name="IPV6", dtype=str)
        scheduler_lookup = {
            str(row.get("OPS Ticket#", "")).strip(): {
                "Activation Technician": str(row.get("Activation Technician", "")).strip(),
                "STATUS": str(row.get("STATUS", "")).strip()
            } for _, row in df_sched.iterrows()
        }
    except:
        scheduler_lookup = {}
else:
    scheduler_lookup = {}

order = target_order
data = order["Data"]
order_number = str(data.get("Ops Console Ticket", "")).strip()
current_date = datetime.now().strftime("%Y-%m-%d")
output_directory = fr"C:\Users\AD39644\IPv6_Test_Files\{current_date}"
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

try:
    service_id = str(data.get("Service ID", "")).strip()
    ipv6_region = identify_region(data.get("IPv6 WAN", ""))
    fixed_lan = lan_subnet_fix(data.get("IPv6 LAN", ""))
    ce_wan = ce_wan_address(data.get("IPv6 WAN", ""))
    area = ipv6_region_map(ipv6_region)
    md_pw = md_pw_map(ipv6_region)
    jRI = juniper_RI_map(ipv6_region)
    vprn = Nokia_vprn_map(ipv6_region)
    j_bar = j_barton(data.get("IPv6 LAN", ""))
    vendor = data.get("Vendor", "").strip()

    laser_matches = search_circuit(service_id)
    default_interface, default_device, default_scid, default_location, default_wan_ip, default_vrf = get_default_interface(laser_matches, ipv6_region)

    # Choose template
    if default_device.upper().startswith("ESP"):
        pe_type = "Alcatel"
        template_path = r"C:\Users\AD39644\Service Information ESP FORT.txt" if vendor.upper().startswith("FORT") else r"C:\Users\AD39644\Service Information ESP.txt"
    else:
        pe_type = "Juniper"
        if default_interface.upper().startswith("LSQ"):
            template_path = r"C:\Users\AD39644\Service Information Juno LSQ FORT.txt" if vendor.upper().startswith("FORT") else r"C:\Users\AD39644\Service Information Juno LSQ.txt"
        else:
            template_path = r"C:\Users\AD39644\Service Information Juno T1 FORT.txt" if vendor.upper().startswith("FORT") else r"C:\Users\AD39644\Service Information Juno T1.txt"

    with open(template_path, 'r', encoding='utf-8') as f:
        template = f.read()

    # Replace main file placeholders
    template = template.replace('{Ops Console Ticket}', order_number)
    template = template.replace('{iSE Design Link}', data.get("iSE Design Link", "Not in Inventory").strip())
    template = template.replace('{Region}', (ipv6_region or "").strip())
    template = template.replace('{Lan (Data 1)}', fixed_lan or "")
    template = template.replace('{WAN/126 CE}', ce_wan or "")
    template = template.replace('{WAN/126 CEnoSub}', (ce_wan.split('/')[0] if ce_wan else ""))
    template = template.replace('{md_pw}', md_pw.strip())
    template = template.replace('{j_bar}', j_bar or "")
    template = template.replace('{jRI}', jRI.strip())
    template = template.replace('{jRI_conf}', jRI.strip().split('-200')[0])
    template = template.replace('{vprn}', vprn.strip())
    template = template.replace('{area}', area.strip())
    template = template.replace('{IPv6_wan_noSub}', data.get("IPv6 WAN", "").split('/')[0])
    template = template.replace('{IPv6_lan_noSub}', data.get("IPv6 LAN", "").split('/')[0])
    template = template.replace('{IPv6_lan_noSuband1}', data.get("IPv6 LAN", "").split('/')[0] + "1")
    template = template.replace('{IPv6_lan_Sub64and1}', data.get("IPv6 LAN", "").split('/')[0] + "1/64")
    template = template.replace('{IPv6_lan_and1}', data.get("IPv6 LAN", "").split('/')[0] + "1")
    template = template.replace('{WAN_CE}', data.get("IPv6 WAN", "").split('/')[0])
    template = template.replace('{Node_Only}', data.get("Node Name", "").split('.')[0].upper())
    template = template.replace('{regional_vlan}', "80" + (ipv6_region or ""))
    template = template.replace('{IPv6 Status}', data.get("IPv6 Status", "").strip())
    loopback = data.get("IPv6 Loopback", "")
    if loopback and '/' in loopback:
        loop_parts = loopback.split('/')
        template = template.replace('{IPv6 Loopback_andone}', loop_parts[0] + "/" + loop_parts[1])
    template = template.replace('{Service ID}', service_id)
    template = template.replace('{IPv6 WAN}', data.get("IPv6 WAN", "").strip())
    template = template.replace('{IPv6 LAN}', data.get("IPv6 LAN", "").strip())
    template = template.replace('{IPv6 Loopback}', loopback)
    template = template.replace('{DOI_Bureau}', data.get("DOI_Bureau", "").strip())
    template = template.replace('{WHD_Location}', data.get("WHD_Location", "").strip())
    template = template.replace('{Node Name}', data.get("Node Name", "").strip())
    template = template.replace('{IP Address}', data.get("IP Address", "").strip())
    template = template.replace('{Address}', data.get("Address", "").strip())
    template = template.replace('{City}', data.get("City", "").strip())
    template = template.replace('{State}', data.get("State", "").strip())
    template = template.replace('{Vendor}', vendor)
    template = template.replace('{pe_type}', pe_type)
    template = template.replace('{WHD_Location_City}', (lambda m: m.group(1).replace('_', ' ').strip() if m else "")(
        re.search(r'-(?P<group>[^-]*)-(?!.*-)', data.get("WHD_Location", " "))
    ))

    # Replace LASER values
    template = template.replace('{default_interface}', default_interface.strip())
    template = template.replace('{default_device}', default_device.strip())
    template = template.replace('{default_scid}', default_scid.strip())
    template = template.replace('{default_location}', default_location.strip())
    template = template.replace('{default_wan_ip}', default_wan_ip.strip())
    if default_wan_ip:
        wan_parts = default_wan_ip.split('/')[0].split('.')
        wan_parts[-1] = str(int(wan_parts[-1]) + 1)
        template = template.replace('{default_wan_ipand1}', '.'.join(wan_parts).strip())
    else:
        template = template.replace('{default_wan_ipand1}', "")
    template = template.replace('{default_vrf}', default_vrf.strip())
    template = template.replace('{def_int_noSub}', default_interface.split('.')[0] if default_interface else "")
    template = template.replace('{lsq_int}', default_interface.split('.')[0].replace(':', '.') if default_interface else "")

    # Scheduler data
    scheduler_data = scheduler_lookup.get(order_number, {})
    template = template.replace('{Activation Technician}', scheduler_data.get("Activation Technician", ""))
    template = template.replace('{scheduler}', scheduler_data.get("STATUS", "Did not Find in Schedule"))

    # Append network matches
    network_info = "\n\nNetwork Matches:\n\n"
    for lm in laser_matches:
        for key, val in lm["Data"].items():
            network_info += f"{key}: {val}\n"
        network_info += "\n-----------------\n\n"
    template += network_info

    # Write output
    filename = f"{order_number.replace('/', '_')} - {current_date} - Pre-Checks.txt"
    with open(os.path.join(output_directory, filename), 'w', encoding='utf-8') as f:
        f.write(template)
    print(f"Created: {filename}")

except Exception as e:
    error_text = traceback.format_exc()
    print(f"Error:\n{error_text}")
