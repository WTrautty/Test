import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from pandas.tseries.offsets import MonthEnd

# === Configuration ===
EXCEL_PATH = r"C:\Users\AD39644\Downloads\data (5).xlsx"
EXPORT_HTML = r"C:\Users\AD39644\OneDrive - Lumen\Federal Service Delivery - Scripting Archive\Dashboards.html"
TAB_MIN_ENTRIES = 100
top_performer_name = "Davis, Walter (Walter)"
top_label = "Top Performer"
ADDITIONAL_EXCEL = r"C:\Users\AD39644\Desktop\EIS\OneDrive_2024-07-25\Auditing Script\Outlook_Calendars.xlsx"

# === Load and preprocess main data ===
df = pd.read_excel(EXCEL_PATH, engine='openpyxl')
df = df[['Task Owner', 'Closure Code 1', 'Completed Date']].dropna()
df['Completed Date'] = pd.to_datetime(df['Completed Date'], errors='coerce')
df = df.dropna(subset=['Completed Date'])
df['Month'] = df['Completed Date'].dt.to_period('M').astype(str)

owner_counts = df['Task Owner'].value_counts()
valid_owners = owner_counts[owner_counts >= TAB_MIN_ENTRIES].index.tolist()

monthly_totals = df.groupby(['Month', 'Task Owner']).size().reset_index(name='Count')
global_avg = monthly_totals.groupby('Month')['Count'].mean().reset_index(name='Average')

tab_buttons = []
tab_contents = []

# === Global Charts ===
df['Is Fail'] = df['Closure Code 1'].str.lower().str.contains('fail')

fail_rate = df.groupby('Month')['Is Fail'].mean().reset_index()
fail_rate['Fail %'] = fail_rate['Is Fail'] * 100
fail_line_fig = px.line(fail_rate, x='Month', y='Fail %', title='Global Failure Rate per Month')
fail_line_fig.update_layout(yaxis=dict(range=[0, 100]))
fail_line_html = fail_line_fig.to_html(full_html=False, include_plotlyjs=False)

global_pie = df['Closure Code 1'].value_counts(normalize=True) * 100
global_pie_df = global_pie.reset_index()
global_pie_df.columns = ['Closure Code', 'Percentage']
closure_pie_fig = px.pie(global_pie_df, names='Closure Code', values='Percentage',
                         title="Global Closure Code Distribution")
closure_pie_fig.update_layout(height=400)
closure_pie_html = closure_pie_fig.to_html(full_html=False, include_plotlyjs=True)  # inject JS here

closed_monthly = df.groupby('Month').size().reset_index(name='Closed Orders')
closed_line_fig = px.line(closed_monthly, x='Month', y='Closed Orders', title="Global Closed Orders Per Month")
closed_line_html = closed_line_fig.to_html(full_html=False, include_plotlyjs=False)

# === Scheduling Tab ===
xls = pd.read_excel(ADDITIONAL_EXCEL, sheet_name=None, engine='openpyxl')
monthly_rows_per_tab = []
for sheet, data in xls.items():
    if "End" in data.columns:
        data = data.dropna(subset=['End']).copy()
        data['End'] = pd.to_datetime(data['End'], errors='coerce')
        data = data.dropna(subset=['End'])
        data['Month'] = data['End'].dt.to_period("M").astype(str)
        grouped = data.groupby('Month').size().reset_index(name='Count')
        grouped['Tab'] = sheet
        monthly_rows_per_tab.append(grouped)

sched_df = pd.concat(monthly_rows_per_tab)

avg_tab_fig = px.bar(sched_df.groupby('Tab')['Count'].mean().reset_index(),
                     x='Tab', y='Count', title="Average Rows per Tab per Month")
total_monthly_fig = px.line(sched_df.groupby('Month')['Count'].sum().reset_index(name='Total Rows'),
                            x='Month', y='Total Rows', title="Total Rows Across All Tabs")

workday_data = []
for month, group in sched_df.groupby('Month'):
    total = group['Count'].sum()
    y, m = map(int, month.split('-'))
    start = pd.Timestamp(y, m, 1)
    end = start + MonthEnd(0)
    weekdays = pd.date_range(start, end, freq='B')
    workday_data.append({'Month': month, 'Avg Per Workday': total / len(weekdays)})

workday_df = pd.DataFrame(workday_data)
workday_fig = px.bar(workday_df, x='Month', y='Avg Per Workday', title="Average Rows per Workday")

scheduling_tab_html = f"""
<div class="tabcontent" style="display:block">
    <h2>Scheduling Dashboard</h2>
    <hr>{avg_tab_fig.to_html(full_html=False, include_plotlyjs=False)}
    <hr>{total_monthly_fig.to_html(full_html=False, include_plotlyjs=False)}
    <hr>{workday_fig.to_html(full_html=False, include_plotlyjs=False)}
</div>
"""

# === Final HTML Output ===
html_output = f"""
<html>
<head>
    <title>Closure Code Dashboard</title>
    <script>
    window.addEventListener('load', function() {{
        window.dispatchEvent(new Event('resize'));
    }});
    function switchMainTab(evt, tabName) {{
        let tabs = document.getElementsByClassName('main-tab');
        for (let t of tabs) t.style.display = 'none';
        for (let b of document.getElementsByClassName('maintablink')) b.classList.remove('active');
        document.getElementById(tabName).style.display = 'block';
        evt.currentTarget.classList.add('active');
        setTimeout(() => window.dispatchEvent(new Event('resize')), 200);
    }}
    </script>
    <style>
        body {{ font-family: sans-serif; background: #f9f9f9; margin: 0; padding: 0; }}
        .maintablink {{
            background-color: #ddd; border: none; padding: 10px 20px; margin: 5px; font-size: 16px;
        }}
        .maintablink.active {{ background-color: #bbb; }}
        .tabcontent {{ display: none; max-width: 1400px; margin: 20px auto; background: white; padding: 20px; border-radius: 8px; }}
        .main-tab-buttons {{ text-align: center; }}
    </style>
</head>
<body>
    <h1>Closure Code Dashboard</h1>
    <div class="main-tab-buttons">
        <button class="maintablink active" onclick="switchMainTab(event, 'globalTab')">Global Statistics</button>
        <button class="maintablink" onclick="switchMainTab(event, 'schedulingTab')">Scheduling</button>
    </div>
    <div id="globalTab" class="main-tab" style="display:block">
        <div class="tabcontent">
            <hr>{fail_line_html}
            <hr>{closure_pie_html}
            <hr>{closed_line_html}
        </div>
    </div>
    <div id="schedulingTab" class="main-tab" style="display:none">
        {scheduling_tab_html}
    </div>
</body>
</html>
"""

with open(EXPORT_HTML, 'w', encoding='utf-8') as f:
    f.write(html_output)

print(f"âœ… Dashboard created at: {EXPORT_HTML}")
