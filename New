
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from pandas.tseries.offsets import MonthEnd

# === Configuration ===
EXCEL_PATH = r"C:\Path\To\Your\MainData.xlsx"
ADDITIONAL_EXCEL = r"C:\Path\To\Your\SchedulingWorkbook.xlsx"
EXPORT_HTML = r"C:\Path\To\Your\DashboardOutput.html"
TAB_MIN_ENTRIES = 100
top_performer_name = "Davis, Walter (Walter)"
top_label = "Top Performer"

# === Load and preprocess data ===
df = pd.read_excel(EXCEL_PATH, engine='openpyxl')
df = df[['Task Owner', 'Closure Code 1', 'Completed Date']].dropna()
df['Completed Date'] = pd.to_datetime(df['Completed Date'], errors='coerce')
df = df.dropna(subset=['Completed Date'])
df['Month'] = df['Completed Date'].dt.to_period('M').astype(str)
df['Is Fail'] = df['Closure Code 1'].str.lower().str.contains('fail')

owner_counts = df['Task Owner'].value_counts()
valid_owners = owner_counts[owner_counts >= TAB_MIN_ENTRIES].index.tolist()
monthly_totals = df.groupby(['Month', 'Task Owner']).size().reset_index(name='Count')
global_avg = monthly_totals.groupby('Month')['Count'].mean().reset_index(name='Average')

tab_buttons = []
tab_contents = []

for i, owner in enumerate(valid_owners):
    div_id = f"tab{i}"
    owner_data = df[df['Task Owner'] == owner]
    top_data = df[df['Task Owner'] == top_performer_name]

    owner_pie = owner_data['Closure Code 1'].value_counts(normalize=True) * 100
    top_pie = top_data['Closure Code 1'].value_counts(normalize=True) * 100
    all_codes = set(owner_pie.index).union(set(top_pie.index))
    owner_pie = owner_pie.reindex(all_codes, fill_value=0)
    top_pie = top_pie.reindex(all_codes, fill_value=0)

    pie_df = owner_pie.reset_index()
    pie_df.columns = ['Closure Code', 'Owner %']
    pie_fig = px.pie(pie_df, names='Closure Code', values='Owner %',
                     title=f"{owner}'s Closure Code Distribution")
    pie_fig.update_layout(height=400)



    delta_df = pd.DataFrame({
        'Closure Code': list(all_codes),
        'Owner %': [owner_pie[code] for code in all_codes],
        'Top %': [top_pie[code] for code in all_codes]
    })
    delta_df['Delta'] = delta_df['Owner %'] - delta_df['Top %']
    delta_df.sort_values('Delta', inplace=True)

    marker_colors = [
        'green' if ('successful' in str(code).lower() and delta >= 0)
        else 'crimson' if ('successful' in str(code).lower() and delta < 0)
        else 'green' if ('fail' in str(code).lower() and delta < 0)
        else 'crimson' if ('fail' in str(code).lower() and delta >= 0)
        else 'blue'
        for code, delta in zip(delta_df['Closure Code'], delta_df['Delta'])
    ]

    delta_fig = go.Figure()
    delta_fig.add_trace(go.Bar(
        y=delta_df['Closure Code'], x=delta_df['Delta'], orientation='h',
        marker_color=marker_colors, hovertemplate='Difference: %{x:.1f}%<extra></extra>'
    ))
    delta_fig.update_layout(
        title=f"{owner} vs {top_label} – Closure Code Usage Difference",
        xaxis=dict(range=[-20, 20]), height=450,
        margin=dict(t=60, l=40, r=40, b=40), showlegend=False
    )

    # Global Charts
fail_rate = df.groupby('Month')['Is Fail'].mean().reset_index()
fail_rate['Fail %'] = fail_rate['Is Fail'] * 100
fail_line_html = px.line(fail_rate, x='Month', y='Fail %', title='Global Failure Rate per Month').to_html(full_html=False, include_plotlyjs='cdn')

global_pie = df['Closure Code 1'].value_counts(normalize=True) * 100
global_pie_df = global_pie.reset_index()
global_pie_df.columns = ['Closure Code', 'Percentage']
closure_pie_html = px.pie(global_pie_df, names='Closure Code', values='Percentage',
                          title="Global Closure Code Distribution").to_html(full_html=False, include_plotlyjs=False)

closed_monthly = df.groupby('Month').size().reset_index(name='Closed Orders')
closed_line_html = px.line(closed_monthly, x='Month', y='Closed Orders',
                           title="Global Closed Orders Per Month").to_html(full_html=False, include_plotlyjs=False)

# Scheduling
xls = pd.read_excel(ADDITIONAL_EXCEL, sheet_name=None, engine='openpyxl')
sheet_monthly_counts = []

for sheet_name, sheet_df in xls.items():
    if "End" in sheet_df.columns:
        sheet_df = sheet_df.dropna(subset=["End"])
        sheet_df["End"] = pd.to_datetime(sheet_df["End"], errors='coerce')
        sheet_df = sheet_df.dropna(subset=["End"])
        sheet_df["Month"] = sheet_df["End"].dt.to_period("M").astype(str)
        monthly = sheet_df.groupby("Month").size().reset_index(name="Count")
        monthly["Sheet"] = sheet_name
        sheet_monthly_counts.append(monthly)

combined_sched_data = pd.concat(sheet_monthly_counts, ignore_index=True)

avg_rows_per_tab = combined_sched_data.groupby("Sheet")["Count"].mean().reset_index()
bar_avg_tab_html = px.bar(avg_rows_per_tab, x="Sheet", y="Count", title="Avg Rows per Tab per Month").to_html(full_html=False, include_plotlyjs='cdn')

total_per_month = combined_sched_data.groupby("Month")["Count"].sum().reset_index(name="Total Rows")
line_total_fig = go.Figure()
line_total_fig.add_trace(go.Scatter(
    x=total_per_month["Month"], y=total_per_month["Total Rows"],
    mode="lines+markers", name="Total Rows"))
line_total_fig.update_layout(title="Total Combined Rows per Month",
                             xaxis_title="Month", yaxis_title="Rows", height=400)
line_total_html = line_total_fig.to_html(full_html=False, include_plotlyjs=False)



# === Final HTML Output
html_output = f"""
<html>
<head>
    <title>Closure Code Dashboard</title>
    <script>
    function switchMainTab(evt, tabName) {{
        var tabs = document.getElementsByClassName('main-tab');
        for (var i = 0; i < tabs.length; i++) {{
            tabs[i].style.display = 'none';
        }}
        var links = document.getElementsByClassName('maintablink');
        for (var i = 0; i < links.length; i++) {{
            links[i].classList.remove('active');
        }}
        document.getElementById(tabName).style.display = 'block';
        evt.currentTarget.classList.add('active');
    }}
    </script>
    <style>
        body {{ font-family: sans-serif; background-color: #f9f9f9; margin: 0; padding: 20px; }}
        .maintablink {{ background-color: #ddd; border: none; cursor: pointer; padding: 10px 20px; margin: 2px; font-size: 16px; }}
        .maintablink.active {{ background-color: #bbb; }}
        .main-tab {{ display: none; width: 100%; }}
        .tabcontent {{ display: none; max-width: 1400px; margin: 20px auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.05); }}
    </style>
</head>
<body>
    <h1>Closure Code Dashboard</h1>
    <div class="main-tab-buttons">
        <button class="maintablink active" onclick="switchMainTab(event, 'globalTab')">Global Statistics</button>
        <button class="maintablink" onclick="switchMainTab(event, 'schedulingTab')">Scheduling</button>
    </div>
    <div id="globalTab" class="main-tab" style="display:block">
        <div class="tabcontent">
            <h2>Global Closure Code Statistics</h2>
            <hr>{fail_line_html}
            <hr>{closure_pie_html}
            <hr>{closed_line_html}
        </div>
    </div>
    <div id="schedulingTab" class="main-tab" style="display:none">
        <div class="tabcontent">
            <h2>Scheduling Dashboard</h2>
            <hr>{bar_avg_tab_html}
            <hr>{line_total_html}
        </div>
    </div>
</body>
</html>
"""

# === Save to file
with open(EXPORT_HTML, 'w', encoding='utf-8') as f:
    f.write(html_output)

print(f"✅ Dashboard saved at: {EXPORT_HTML}")
