def generate_frat_tab(frat_df, main_df):
    import pandas as pd
    import plotly.graph_objects as go

    frat_df = frat_df.copy()
    frat_df['Create Date'] = pd.to_datetime(frat_df['Create Date'], errors='coerce')
    frat_df['Completed Date'] = pd.to_datetime(frat_df['Completed Date'], errors='coerce')
    frat_df = frat_df.dropna(subset=['Create Date', 'Completed Date', 'Task Owner'])

    frat_df['Days to Close'] = (frat_df['Completed Date'] - frat_df['Create Date']).dt.days
    frat_df = frat_df[frat_df['Days to Close'] >= 0]
    frat_df['Month'] = frat_df['Completed Date'].dt.to_period('M').astype(str)

    # Prepare main Excel data
    main_df = main_df.copy()
    main_df['Completed Date'] = pd.to_datetime(main_df['Completed Date'], errors='coerce')
    main_df = main_df.dropna(subset=['Completed Date'])
    main_df['Month'] = main_df['Completed Date'].dt.to_period('M').astype(str)
    excel_monthly = main_df.groupby('Month').size().reset_index(name='Main Excel Closed')

    # Static top task owners
    top_owners = [
        "Mclean, Jordan (Jordan)",
        "Lang, Nicholas (Nicholas)",
        "Gray, Christopher (Chris)"
    ]

    def create_bar_chart(data, owner_label):
        monthly_stats = data.groupby('Month').agg(
            Avg_Close=('Days to Close', 'mean'),
            Median_Close=('Days to Close', 'median'),
            P90_Close=('Days to Close', lambda x: x.quantile(0.9))
        ).reset_index()

        fig = go.Figure()
        fig.add_trace(go.Bar(x=monthly_stats['Month'], y=monthly_stats['Avg_Close'], name='Mean'))
        fig.add_trace(go.Bar(x=monthly_stats['Month'], y=monthly_stats['Median_Close'], name='Median'))
        fig.add_trace(go.Bar(x=monthly_stats['Month'], y=monthly_stats['P90_Close'], name='90th Percentile'))

        fig.update_layout(
            barmode='group',
            title=f"Days to Close (Mean/Median/P90) - {owner_label}",
            height=350,
            xaxis_title='Month',
            yaxis_title='Days'
        )
        return fig.to_html(full_html=False, include_plotlyjs=False)

    def create_line_chart(data, label):
        base = data.copy()
        base_monthly = base.groupby('Month').size().reset_index(name='Closed Count')

        fig = go.Figure()

        # Base group trace
        fig.add_trace(go.Scatter(
            x=base_monthly['Month'],
            y=base_monthly['Closed Count'],
            mode='lines+markers',
            name=f"{label} (All)"
        ))

        # Add each top owner's trend if data present
        for owner in top_owners:
            sub = base[base['Task Owner'] == owner]
            if not sub.empty:
                sub_monthly = sub.groupby('Month').size().reset_index(name='Closed')
                fig.add_trace(go.Scatter(
                    x=sub_monthly['Month'],
                    y=sub_monthly['Closed'],
                    mode='lines+markers',
                    name=f"{owner}"
                ))

        # Add EXCEL_PATH monthly totals
        fig.add_trace(go.Scatter(
            x=excel_monthly['Month'],
            y=excel_monthly['Main Excel Closed'],
            mode='lines+markers',
            name='EXCEL Data',
            line=dict(dash='dot')
        ))

        fig.update_layout(
            title=f"Tasks Closed per Month â€“ {label}",
            height=300,
            xaxis_title='Month',
            yaxis_title='Closed Count'
        )
        return fig.to_html(full_html=False, include_plotlyjs=False)

    # Global tab
    global_bar = create_bar_chart(frat_df, 'Global')
    global_line = create_line_chart(frat_df, 'Global')

    buttons = [f'<button class="tablink" onclick="openTab(event, \'frat_tab_global\')">Global</button>']
    contents = [f'<div id="frat_tab_global" class="tabcontent" style="display:block">{global_bar}<hr>{global_line}</div>']

    # Individual task owner tabs
    for i, owner in enumerate(top_owners):
        owner_df = frat_df[frat_df['Task Owner'] == owner]
        bar = create_bar_chart(owner_df, owner)
        line = create_line_chart(owner_df, owner)
        div_id = f"frat_tab_{i}"
        buttons.append(f'<button class="tablink" onclick="openTab(event, \'{div_id}\')">{owner}</button>')
        contents.append(f'<div id="{div_id}" class="tabcontent" style="display:none">{bar}<hr>{line}</div>')

    return f"""
    <div id='fratTab' class='main-tab'>
      <h2>FRAT Task Closure Analysis</h2>
      <div class='tab-buttons-wrapper'>{''.join(buttons)}</div>
      {''.join(contents)}
    </div>
    """
