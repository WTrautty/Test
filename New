def generate_frat_tab(frat_df):
    import pandas as pd
    import plotly.graph_objects as go
    import plotly.express as px

    # Ensure dates are datetime
    frat_df = frat_df.copy()
    frat_df['Create Date'] = pd.to_datetime(frat_df['Create Date'], errors='coerce')
    frat_df['Completed Date'] = pd.to_datetime(frat_df['Completed Date'], errors='coerce')

    # Drop rows missing critical data
    frat_df = frat_df.dropna(subset=['Create Date', 'Completed Date', 'Task Owner'])

    # Compute days to close
    frat_df['Days to Close'] = (frat_df['Completed Date'] - frat_df['Create Date']).dt.days
    frat_df = frat_df[frat_df['Days to Close'] >= 0]  # remove invalid negatives

    # Extract month from Completed Date
    frat_df['Month'] = frat_df['Completed Date'].dt.to_period('M').astype(str)

    # Determine top 3 Task Owners from frat_df ONLY
    print("[DEBUG] FRAT Task Owner value counts:
", frat_df['Task Owner'].value_counts())
top_owners = frat_df['Task Owner'].value_counts().nlargest(3).index.tolist()
print("[DEBUG] Top 3 Task Owners from FRAT:", top_owners)

    def create_bar_chart(data, owner_label):
        monthly_stats = data.groupby('Month').agg(
            Avg_Close=('Days to Close', 'mean'),
            Median_Close=('Days to Close', 'median'),
            P90_Close=('Days to Close', lambda x: x.quantile(0.9))
        ).reset_index()
        fig = go.Figure()
        fig.add_trace(go.Bar(x=monthly_stats['Month'], y=monthly_stats['Avg_Close'], name='Average'))
        fig.add_trace(go.Bar(x=monthly_stats['Month'], y=monthly_stats['Median_Close'], name='Median'))
        fig.add_trace(go.Bar(x=monthly_stats['Month'], y=monthly_stats['P90_Close'], name='90th Percentile'))
        fig.update_layout(
            barmode='group',
            title=f"Days to Close (Avg/Median/P90) - {owner_label}",
            height=400,
            xaxis_title='Month',
            yaxis_title='Days'
        )
        return fig.to_html(full_html=False, include_plotlyjs=False)

    global_chart = create_bar_chart(frat_df, 'Global')

    individual_charts = []
    buttons = [
        f'<button class="tablink" onclick="openTab(event, \"frat_tab_global\")">Global</button>'
    ]
    contents = [
        f'<div id="frat_tab_global" class="tabcontent" style="display:block">{global_chart}</div>'
    ]

    for i, owner in enumerate(top_owners):
        owner_df = frat_df[frat_df['Task Owner'] == owner]
        chart_html = create_bar_chart(owner_df, owner)
        div_id = f"frat_tab_{i}"
        buttons.append(f'<button class="tablink" onclick="openTab(event, \"{div_id}\")">{owner}</button>')
        contents.append(f'<div id="{div_id}" class="tabcontent" style="display:none">{chart_html}</div>')

    html_output = f"""
    <div id='fratTab' class='main-tab'>
      <h2>FRAT Task Closure Analysis</h2>
      <div class='tab-buttons-wrapper'>{''.join(buttons)}</div>
      {''.join(contents)}
    </div>
