def generate_failure_analysis_tab(df):
    import pandas as pd
    import numpy as np
    from scipy.stats import chi2_contingency
    import plotly.graph_objects as go

    required_cols = ["Revised LEC", "Closure Code 1", "Task Owner", "Completed Date", "Create Date"]
    if not all(col in df.columns for col in required_cols):
        return "<div id='failureTab' class='main-tab'><h2>Required columns not found.</h2></div>"

    df = df.copy()
    df["Revised LEC"] = df["Revised LEC"].fillna("Unknown").astype(str)
    df["Task Owner"] = df["Task Owner"].fillna("Unknown").astype(str)
    df["Closure Code 1"] = df["Closure Code 1"].fillna("Unknown").astype(str)
    df["Completed Date"] = pd.to_datetime(df["Completed Date"], errors="coerce")
    df["Create Date"] = pd.to_datetime(df["Create Date"], errors="coerce")
    df["Days to Close"] = (df["Completed Date"] - df["Create Date"]).dt.days
    df = df.dropna(subset=["Completed Date", "Create Date"])
    df["Month"] = df["Completed Date"].dt.to_period("M").astype(str)

    # === Helper for Cramér's V ===
    def cramers_v(confusion_matrix):
        chi2, _, _, _ = chi2_contingency(confusion_matrix)
        n = confusion_matrix.sum().sum()
        min_dim = min(confusion_matrix.shape) - 1
        return np.sqrt(chi2 / (n * min_dim)) if min_dim > 0 else 0

    # === Multicategory Association Strengths ===
    lec_matrix = pd.crosstab(df["Revised LEC"], df["Closure Code 1"])
    lec_cramers_v = cramers_v(lec_matrix)

    owner_matrix = pd.crosstab(df["Task Owner"], df["Closure Code 1"])
    owner_cramers_v = cramers_v(owner_matrix)

    if df["Days to Close"].nunique() > 1:
        df_dummies = pd.get_dummies(df["Closure Code 1"])
        corr_matrix = df_dummies.corrwith(df["Days to Close"])
        time_corr = corr_matrix.abs().max()
    else:
        time_corr = 0

    # === Strength Interpretation ===
    def annotate_strength(value):
        if value >= 0.3:
            return "Moderate association"
        elif value >= 0.1:
            return "Weak association"
        else:
            return "Negligible association"

    # === Plotly Bar Chart ===
    assoc_fig = go.Figure(data=[
        go.Bar(
            x=["Revised LEC", "Task Owner", "Time to Close"],
            y=[lec_cramers_v, owner_cramers_v, time_corr],
            text=[
                f"Cramér's V = {lec_cramers_v:.3f}<br>({annotate_strength(lec_cramers_v)})",
                f"Cramér's V = {owner_cramers_v:.3f}<br>({annotate_strength(owner_cramers_v)})",
                f"Max Pearson r = {time_corr:.3f}<br>({annotate_strength(time_corr)})"
            ],
            textposition="auto",
            marker_color=["#3498db", "#f39c12", "#9b59b6"]
        )
    ])
    assoc_fig.update_layout(
        title="Multicategory Association with Closure Code",
        yaxis_title="Association Strength",
        yaxis=dict(range=[-0.1, 0.5]),
        height=450
    )

    assoc_desc = """
    <p>This chart measures how strongly each factor is associated with all closure outcomes (not just fail/success):</p>
    <ul>
      <li><b>Revised LEC</b> – who handled the task – shows how provider choice influences closure outcomes.</li>
      <li><b>Task Owner</b> – some individuals may be linked to certain outcomes more often.</li>
      <li><b>Time to Close</b> – longer or shorter tasks may trend toward specific closure codes.</li>
    </ul>
    """

    return f"""
    <div id="failureTab" class="main-tab">
      <h2>Multicategory Failure Analysis</h2>
      {assoc_fig.to_html(full_html=False, include_plotlyjs=False)}
      {assoc_desc}
    </div>
    """
